import { GraphQLClient } from 'graphql-request'

import queries from './queries'

export const uri = "https://countries.trevorblades.com";

type Queries={
	[key in keyof typeof queries]:typeof queries[key];
};

export const graphql:GraphQLClient & Queries = Object.assign(
	new GraphQLClient(uri, { headers: {} })
	,queries
);

// The ./types.ts file is generated by the module graphql-codegen (which has to be run manually) 
// from all .graphql files in this project. We export it so others don't have to import 2 things
export * from './types'


export enum EntityType {
	Country='Country'
	,Continent='Continent'
	,Language='Language'
}
export enum QueryName{
	countries='countries'
	,continents='continents'
	,languages='languages'
}
interface E{type:EntityType,query:QueryName}
interface M{[key:string]:E}
const EntityMap={
	'coun':{type:'Country',query:'countries'},
	'cont':{type:'Continent',query:'continents'},
	'lang':{type:'Language',query:'languages'}
} as unknown as M
function toMap(x:string){
	const key=x.toLowerCase().slice(0,4);
	if(key in EntityMap)
		return EntityMap[key];
	else
		throw new Error(`Not a valid Entity: {x}`);
}
export function toEntityType(x:string){
	return toMap(x).type;
}
export function toQueryName(x:string){
	return toMap(x).query;
}

