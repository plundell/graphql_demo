{"ast":null,"code":"import { graphql, assertEntityType, NamesAndCodesDocument } from 'services/countries-api/countries-api.service';\nfunction makeEntityArray(data) {\n  const list = [];\n  Object.entries(data).forEach(_ref => {\n    let [type, arr] = _ref;\n    if (Array.isArray(arr)) {\n      arr.forEach(_ref2 => {\n        let {\n          code,\n          name\n        } = _ref2;\n        list.push({\n          code,\n          name: String(name),\n          type: assertEntityType(type)\n        });\n      });\n    }\n  });\n  return list;\n}\nexport async function getNamesAndCodes() {\n  return graphql.request(NamesAndCodesDocument).then(makeEntityArray);\n}\nexport default getNamesAndCodes;","map":{"version":3,"names":["graphql","assertEntityType","NamesAndCodesDocument","makeEntityArray","data","list","Object","entries","forEach","type","arr","Array","isArray","code","name","push","String","getNamesAndCodes","request","then"],"sources":["/home/buck/Documents/software/formulate_graphql/src/components/country-input.d/names-and-codes.query.ts"],"sourcesContent":["import {\n  graphql,\n  EntityType,\n  assertEntityType,\n  Scalars,\n  NamesAndCodesQuery,\n  NamesAndCodesQueryVariables,\n  NamesAndCodesDocument\n} from 'services/countries-api/countries-api.service';\n\n\nexport interface Entity{\n    name:Scalars['String']\n    ,code:Scalars['ID']\n    ,type:EntityType\n}\n\n\nfunction makeEntityArray(data:NamesAndCodesQuery):Array<Entity> {\n  const list:ReturnType<typeof makeEntityArray>=[];\n  Object.entries(data).forEach(([type,arr])=>{\n    if(Array.isArray(arr)){\n      arr.forEach(({code,name})=>{\n        list.push({code, name:String(name), type:assertEntityType(type)});\n      })\n    }\n  })\n  return list\n}\n\nexport async function getNamesAndCodes(){\n  return graphql.request<NamesAndCodesQuery,NamesAndCodesQueryVariables>(NamesAndCodesDocument).then(makeEntityArray)\n}\n\nexport default getNamesAndCodes\n\n\n\n"],"mappings":"AAAA,SACEA,OAAO,EAEPC,gBAAgB,EAIhBC,qBAAqB,QAChB,8CAA8C;AAUrD,SAASC,eAAe,CAACC,IAAuB,EAAgB;EAC9D,MAAMC,IAAuC,GAAC,EAAE;EAChDC,MAAM,CAACC,OAAO,CAACH,IAAI,CAAC,CAACI,OAAO,CAAC,QAAc;IAAA,IAAb,CAACC,IAAI,EAACC,GAAG,CAAC;IACtC,IAAGC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EAAC;MACpBA,GAAG,CAACF,OAAO,CAAC,SAAe;QAAA,IAAd;UAACK,IAAI;UAACC;QAAI,CAAC;QACtBT,IAAI,CAACU,IAAI,CAAC;UAACF,IAAI;UAAEC,IAAI,EAACE,MAAM,CAACF,IAAI,CAAC;UAAEL,IAAI,EAACR,gBAAgB,CAACQ,IAAI;QAAC,CAAC,CAAC;MACnE,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EACF,OAAOJ,IAAI;AACb;AAEA,OAAO,eAAeY,gBAAgB,GAAE;EACtC,OAAOjB,OAAO,CAACkB,OAAO,CAAiDhB,qBAAqB,CAAC,CAACiB,IAAI,CAAChB,eAAe,CAAC;AACrH;AAEA,eAAec,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}