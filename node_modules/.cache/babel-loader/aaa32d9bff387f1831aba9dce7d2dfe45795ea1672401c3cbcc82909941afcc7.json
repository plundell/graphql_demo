{"ast":null,"code":"var _jsxFileName = \"/home/buck/Documents/software/formulate_graphql/src/components/country-search.d/country-results.component.tsx\";\nimport React from 'react';\nimport { TileGrid } from 'components/tiles.d/tile-grid.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction randomDelay(resolveWith) {\n  return new Promise(resolve => {\n    const delay = Math.random() * (3000 - 1000) + 1000;\n    setTimeout(() => {\n      // console.log('resolving with',resolveWith)\n      resolve(resolveWith);\n    }, delay);\n  });\n}\nexport default class CountryResults extends React.Component {\n  log() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    console.log(this._ID, `<${this.constructor.name}>`, ...args);\n  }\n\n  // private cache:GridProps['tiles']={};\n\n  constructor(props) {\n    var _this$props$results;\n    super(props);\n    this._ID = void 0;\n    this.getTile = ent => {\n      if (this.state.tiles.hasOwnProperty(ent.key) == false) this.setState({\n        tiles: Object.fromEntries([[ent.key, this.buildTile(ent)]])\n      });\n      return this.state.tiles[ent.key];\n    };\n    this.buildTile = ent => {\n      const tile = {\n        title: ent.value,\n        className: ent.type.toLowerCase()\n      };\n      tile.content = this[`build${ent.type}TileContent`](ent);\n      tile.content.then(content => {\n        tile.content = content;\n      });\n      return tile;\n    };\n    this.buildCountryTileContent = ent => {\n      return randomDelay( /*#__PURE__*/_jsxDEV(\"span\", {\n        children: ent.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 22\n      }, this));\n    };\n    this.buildContinentTileContent = ent => {\n      return randomDelay( /*#__PURE__*/_jsxDEV(\"span\", {\n        children: ent.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 22\n      }, this));\n    };\n    this.buildLanguageTileContent = ent => {\n      return randomDelay( /*#__PURE__*/_jsxDEV(\"span\", {\n        children: ent.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 22\n      }, this));\n    };\n    this._ID = Math.floor(Math.random() * 10000);\n    this.state = {\n      tiles: {}\n    };\n    this.log(\"creating\", (_this$props$results = this.props.results) === null || _this$props$results === void 0 ? void 0 : _this$props$results.map(ent => ent.value).join(', '));\n  }\n  getTiles() {\n    const tiles = {};\n    if (this.props.results && this.props.results.length) {\n      for (const ent of this.props.results) {\n        tiles[ent.key] = this.getTile(ent);\n      }\n    }\n    return tiles;\n  }\n  render() {\n    const tiles = this.getTiles();\n    if (Object.keys(tiles)) this.log(\"rendering:\", Object.values(tiles).map(t => t.title).join(', '));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"output\",\n      children: this.props.results ? this.props.results.length ? /*#__PURE__*/_jsxDEV(TileGrid, {\n        tiles: tiles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"emptyResults\",\n        children: \"No results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }, this);\n  }\n}","map":{"version":3,"names":["React","TileGrid","randomDelay","resolveWith","Promise","resolve","delay","Math","random","setTimeout","CountryResults","Component","log","args","console","_ID","constructor","name","props","getTile","ent","state","tiles","hasOwnProperty","key","setState","Object","fromEntries","buildTile","tile","title","value","className","type","toLowerCase","content","then","buildCountryTileContent","buildContinentTileContent","buildLanguageTileContent","floor","results","map","join","getTiles","length","render","keys","values","t"],"sources":["/home/buck/Documents/software/formulate_graphql/src/components/country-search.d/country-results.component.tsx"],"sourcesContent":["import React from 'react'\nimport {TileGrid, Props as GridProps} from 'components/tiles.d/tile-grid.component'\nimport {Entity, NullableEntityArray} from './country-search.component'\n\ninterface Props {\n\tresults:NullableEntityArray\n}\n\ninterface State {\n\ttiles:GridProps['tiles']\n}\n\nfunction randomDelay<T>(resolveWith:T):Promise<T>{\n\treturn new Promise(resolve=>{\n\t\tconst delay=Math.random() * (3000 - 1000) + 1000;\n\t\tsetTimeout(()=>{\n\t\t\t// console.log('resolving with',resolveWith)\n\t\t\tresolve(resolveWith);\n\t\t},delay);\n\t})\n}\n\nexport default class CountryResults extends React.Component<Props,State> {\n\tprivate _ID:number;\n\tlog(...args:any[]){\n\t\tconsole.log(this._ID,`<${this.constructor.name}>`,...args);\n\t}\n\n\t// private cache:GridProps['tiles']={};\n\t\n\tconstructor(props:Props){\n\t\tsuper(props);\n\t\tthis._ID=Math.floor(Math.random()*10000);\n\t\tthis.state={tiles:{}};\n\t\tthis.log(\"creating\",this.props.results?.map(ent=>ent.value).join(', '));\n\t}\n\n\n\tprivate getTiles(){\n\t\tconst tiles:State['tiles']={};\n\t\tif(this.props.results && this.props.results.length){\n\t\t    for(const ent of this.props.results){\n\t\t    \ttiles[ent.key]=this.getTile(ent);\n\t\t\t}\n\t\t}\n\t\treturn tiles;\n\t}\n\tprivate getTile=(ent:Entity):State['tiles'][keyof State['tiles']]=>{\n\t\tif(this.state.tiles.hasOwnProperty(ent.key)==false)\n\t\t\tthis.setState({tiles:Object.fromEntries([[ent.key,this.buildTile(ent)]])})\n\t\treturn this.state.tiles[ent.key];\n\t}\n\tprivate buildTile=(ent:Entity):State['tiles'][keyof State['tiles']]=>{\n\t\tconst tile:any={title:ent.value, className:ent.type.toLowerCase()};\n\t\ttile.content=this[`build${ent.type}TileContent`](ent);\n\t\ttile.content.then((content:JSX.Element)=>{tile.content=content})\n\t\treturn tile;\n\t}\n\tprivate buildCountryTileContent=(ent:Entity):Promise<JSX.Element>=>{\n\t\treturn randomDelay(<span>{ent.type}</span>);\n\t}\n\tprivate buildContinentTileContent=(ent:Entity):Promise<JSX.Element>=>{\n\t\treturn randomDelay(<span>{ent.type}</span>);\n\t}\n\tprivate buildLanguageTileContent=(ent:Entity):Promise<JSX.Element>=>{\n\t\treturn randomDelay(<span>{ent.type}</span>);\n\t}\n\n\trender(){\n\t\tconst tiles=this.getTiles()\n\t\tif(Object.keys(tiles))\n\t\t\tthis.log(\"rendering:\",Object.values(tiles).map(t=>t.title).join(', '));\n\t\treturn (<div id=\"output\">{\n\t\t\tthis.props.results ?\n\t\t\t\tthis.props.results.length ?\n\t\t\t\t\t<TileGrid tiles={tiles}/>\n\t\t\t\t\t:<div className='emptyResults'>No results</div>\n\t\t\t\t:''\n\t\t}</div>)\n\t}\n\n\n\n\n\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,QAAQ,QAA2B,wCAAwC;AAAA;AAWnF,SAASC,WAAW,CAAIC,WAAa,EAAY;EAChD,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAE;IAC3B,MAAMC,KAAK,GAACC,IAAI,CAACC,MAAM,EAAE,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,IAAI;IAChDC,UAAU,CAAC,MAAI;MACd;MACAJ,OAAO,CAACF,WAAW,CAAC;IACrB,CAAC,EAACG,KAAK,CAAC;EACT,CAAC,CAAC;AACH;AAEA,eAAe,MAAMI,cAAc,SAASV,KAAK,CAACW,SAAS,CAAc;EAExEC,GAAG,GAAe;IAAA,kCAAXC,IAAI;MAAJA,IAAI;IAAA;IACVC,OAAO,CAACF,GAAG,CAAC,IAAI,CAACG,GAAG,EAAE,IAAG,IAAI,CAACC,WAAW,CAACC,IAAK,GAAE,EAAC,GAAGJ,IAAI,CAAC;EAC3D;;EAEA;;EAEAG,WAAW,CAACE,KAAW,EAAC;IAAA;IACvB,KAAK,CAACA,KAAK,CAAC;IAAC,KARNH,GAAG;IAAA,KAwBHI,OAAO,GAAEC,GAAU,IAAwC;MAClE,IAAG,IAAI,CAACC,KAAK,CAACC,KAAK,CAACC,cAAc,CAACH,GAAG,CAACI,GAAG,CAAC,IAAE,KAAK,EACjD,IAAI,CAACC,QAAQ,CAAC;QAACH,KAAK,EAACI,MAAM,CAACC,WAAW,CAAC,CAAC,CAACP,GAAG,CAACI,GAAG,EAAC,IAAI,CAACI,SAAS,CAACR,GAAG,CAAC,CAAC,CAAC;MAAC,CAAC,CAAC;MAC3E,OAAO,IAAI,CAACC,KAAK,CAACC,KAAK,CAACF,GAAG,CAACI,GAAG,CAAC;IACjC,CAAC;IAAA,KACOI,SAAS,GAAER,GAAU,IAAwC;MACpE,MAAMS,IAAQ,GAAC;QAACC,KAAK,EAACV,GAAG,CAACW,KAAK;QAAEC,SAAS,EAACZ,GAAG,CAACa,IAAI,CAACC,WAAW;MAAE,CAAC;MAClEL,IAAI,CAACM,OAAO,GAAC,IAAI,CAAE,QAAOf,GAAG,CAACa,IAAK,aAAY,CAAC,CAACb,GAAG,CAAC;MACrDS,IAAI,CAACM,OAAO,CAACC,IAAI,CAAED,OAAmB,IAAG;QAACN,IAAI,CAACM,OAAO,GAACA,OAAO;MAAA,CAAC,CAAC;MAChE,OAAON,IAAI;IACZ,CAAC;IAAA,KACOQ,uBAAuB,GAAEjB,GAAU,IAAwB;MAClE,OAAOlB,WAAW,eAAC;QAAA,UAAOkB,GAAG,CAACa;MAAI;QAAA;QAAA;QAAA;MAAA,QAAQ,CAAC;IAC5C,CAAC;IAAA,KACOK,yBAAyB,GAAElB,GAAU,IAAwB;MACpE,OAAOlB,WAAW,eAAC;QAAA,UAAOkB,GAAG,CAACa;MAAI;QAAA;QAAA;QAAA;MAAA,QAAQ,CAAC;IAC5C,CAAC;IAAA,KACOM,wBAAwB,GAAEnB,GAAU,IAAwB;MACnE,OAAOlB,WAAW,eAAC;QAAA,UAAOkB,GAAG,CAACa;MAAI;QAAA;QAAA;QAAA;MAAA,QAAQ,CAAC;IAC5C,CAAC;IAlCA,IAAI,CAAClB,GAAG,GAACR,IAAI,CAACiC,KAAK,CAACjC,IAAI,CAACC,MAAM,EAAE,GAAC,KAAK,CAAC;IACxC,IAAI,CAACa,KAAK,GAAC;MAACC,KAAK,EAAC,CAAC;IAAC,CAAC;IACrB,IAAI,CAACV,GAAG,CAAC,UAAU,yBAAC,IAAI,CAACM,KAAK,CAACuB,OAAO,wDAAlB,oBAAoBC,GAAG,CAACtB,GAAG,IAAEA,GAAG,CAACW,KAAK,CAAC,CAACY,IAAI,CAAC,IAAI,CAAC,CAAC;EACxE;EAGQC,QAAQ,GAAE;IACjB,MAAMtB,KAAoB,GAAC,CAAC,CAAC;IAC7B,IAAG,IAAI,CAACJ,KAAK,CAACuB,OAAO,IAAI,IAAI,CAACvB,KAAK,CAACuB,OAAO,CAACI,MAAM,EAAC;MAC/C,KAAI,MAAMzB,GAAG,IAAI,IAAI,CAACF,KAAK,CAACuB,OAAO,EAAC;QACnCnB,KAAK,CAACF,GAAG,CAACI,GAAG,CAAC,GAAC,IAAI,CAACL,OAAO,CAACC,GAAG,CAAC;MACpC;IACD;IACA,OAAOE,KAAK;EACb;EAsBAwB,MAAM,GAAE;IACP,MAAMxB,KAAK,GAAC,IAAI,CAACsB,QAAQ,EAAE;IAC3B,IAAGlB,MAAM,CAACqB,IAAI,CAACzB,KAAK,CAAC,EACpB,IAAI,CAACV,GAAG,CAAC,YAAY,EAACc,MAAM,CAACsB,MAAM,CAAC1B,KAAK,CAAC,CAACoB,GAAG,CAACO,CAAC,IAAEA,CAAC,CAACnB,KAAK,CAAC,CAACa,IAAI,CAAC,IAAI,CAAC,CAAC;IACvE,oBAAQ;MAAK,EAAE,EAAC,QAAQ;MAAA,UACvB,IAAI,CAACzB,KAAK,CAACuB,OAAO,GACjB,IAAI,CAACvB,KAAK,CAACuB,OAAO,CAACI,MAAM,gBACxB,QAAC,QAAQ;QAAC,KAAK,EAAEvB;MAAM;QAAA;QAAA;QAAA;MAAA,QAAE,gBACxB;QAAK,SAAS,EAAC,cAAc;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAiB,GAC/C;IAAE;MAAA;MAAA;MAAA;IAAA,QACE;EACR;AAMD"},"metadata":{},"sourceType":"module","externalDependencies":[]}