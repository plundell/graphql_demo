{"ast":null,"code":"export default {\n  type: assertType,\n  typedArray: assertTypedArray\n};\nfunction getPrettyType(type) {\n  return typeof type == 'string' ? type : type.name;\n}\nfunction checkType(x, type) {\n  if (typeof type == 'string') {\n    return typeof x == type;\n  } else if (x && typeof x == 'object' && x instanceof type) {\n    return true;\n  }\n  return false;\n}\nfunction assertType(x, type) {\n  if (checkType(x, type) == false) throw new TypeError(`Expected a ${getPrettyType(type)}, but got: (${typeof x})${String(x)}`);\n}\nfunction assertTypedArray(arr, type) {\n  if (!Array.isArray(arr)) throw new TypeError(`Expected typed array, but got: (${typeof arr})${String(arr)}`);\n  const i = arr.findIndex(x => checkType(x, type) == false);\n  if (i > -1) throw new TypeError(`Expected ${getPrettyType(type)}[], but index ${i} was: (${typeof arr[i]})${String(arr[i])}`);\n}","map":{"version":3,"names":["type","assertType","typedArray","assertTypedArray","getPrettyType","name","checkType","x","TypeError","String","arr","Array","isArray","i","findIndex"],"sources":["/home/buck/Documents/software/formulate_graphql/src/services/assert.helper.ts"],"sourcesContent":["\nexport default {\n\ttype:assertType\n\t,typedArray:assertTypedArray\n}\n\ntype stringOrClass=string|Function\n\nfunction getPrettyType(type:stringOrClass){\n\treturn typeof type=='string' ? type : type.name\n}\n\nfunction checkType(x:any,type:stringOrClass):Boolean{\n\tif(typeof type=='string'){\n\t\treturn typeof x==type\n\t}else if(x && typeof x=='object' && x instanceof type){\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunction assertType(x:any,type:stringOrClass):void{\n\tif(checkType(x,type)==false)\n\t\tthrow new TypeError(`Expected a ${getPrettyType(type)}, but got: (${typeof x})${String(x)}`);\n}\n\nfunction assertTypedArray(arr:any,type:stringOrClass):void{\n\tif(!Array.isArray(arr))\n\t\tthrow new TypeError(`Expected typed array, but got: (${typeof arr})${String(arr)}`);\n\n\tconst i=arr.findIndex(x=>checkType(x,type)==false);\n\tif(i>-1)\n\t\tthrow new TypeError(`Expected ${getPrettyType(type)}[], but index ${i} was: (${typeof arr[i]})${String(arr[i])}`)\n\n}\n\n"],"mappings":"AACA,eAAe;EACdA,IAAI,EAACC,UAAU;EACdC,UAAU,EAACC;AACb,CAAC;AAID,SAASC,aAAa,CAACJ,IAAkB,EAAC;EACzC,OAAO,OAAOA,IAAI,IAAE,QAAQ,GAAGA,IAAI,GAAGA,IAAI,CAACK,IAAI;AAChD;AAEA,SAASC,SAAS,CAACC,CAAK,EAACP,IAAkB,EAAS;EACnD,IAAG,OAAOA,IAAI,IAAE,QAAQ,EAAC;IACxB,OAAO,OAAOO,CAAC,IAAEP,IAAI;EACtB,CAAC,MAAK,IAAGO,CAAC,IAAI,OAAOA,CAAC,IAAE,QAAQ,IAAIA,CAAC,YAAYP,IAAI,EAAC;IACrD,OAAO,IAAI;EACZ;EACA,OAAO,KAAK;AACb;AAEA,SAASC,UAAU,CAACM,CAAK,EAACP,IAAkB,EAAM;EACjD,IAAGM,SAAS,CAACC,CAAC,EAACP,IAAI,CAAC,IAAE,KAAK,EAC1B,MAAM,IAAIQ,SAAS,CAAE,cAAaJ,aAAa,CAACJ,IAAI,CAAE,eAAc,OAAOO,CAAE,IAAGE,MAAM,CAACF,CAAC,CAAE,EAAC,CAAC;AAC9F;AAEA,SAASJ,gBAAgB,CAACO,GAAO,EAACV,IAAkB,EAAM;EACzD,IAAG,CAACW,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EACrB,MAAM,IAAIF,SAAS,CAAE,mCAAkC,OAAOE,GAAI,IAAGD,MAAM,CAACC,GAAG,CAAE,EAAC,CAAC;EAEpF,MAAMG,CAAC,GAACH,GAAG,CAACI,SAAS,CAACP,CAAC,IAAED,SAAS,CAACC,CAAC,EAACP,IAAI,CAAC,IAAE,KAAK,CAAC;EAClD,IAAGa,CAAC,GAAC,CAAC,CAAC,EACN,MAAM,IAAIL,SAAS,CAAE,YAAWJ,aAAa,CAACJ,IAAI,CAAE,iBAAgBa,CAAE,UAAS,OAAOH,GAAG,CAACG,CAAC,CAAE,IAAGJ,MAAM,CAACC,GAAG,CAACG,CAAC,CAAC,CAAE,EAAC,CAAC;AAEnH"},"metadata":{},"sourceType":"module","externalDependencies":[]}