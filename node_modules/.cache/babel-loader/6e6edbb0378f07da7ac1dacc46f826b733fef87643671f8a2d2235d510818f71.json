{"ast":null,"code":"var _jsxFileName = \"/home/buck/Documents/software/formulate_graphql/src/components/country-search.d/country-search.component.tsx\";\nimport React from 'react';\nimport { CompletionInput } from 'components/completion-input.d/completion-input.component';\nimport CountryResults from './country-results.component';\nimport \"./country-search.css\";\nimport { graphql, toEntityType } from 'services/countries-api/countries-api.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst settings = {\n  debounce: 300,\n  maxResults: 20\n};\nexport class CountrySearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.entities = null;\n    this.state = {\n      results: null\n    };\n    graphql.getNamesAndCodes({}).then(data => {\n      const list = [];\n      Object.entries(data).forEach(_ref => {\n        let [t, arr] = _ref;\n        if (Array.isArray(arr)) {\n          const type = toEntityType(t);\n          arr.forEach(_ref2 => {\n            let {\n              code,\n              name\n            } = _ref2;\n            code = code.toUpperCase();\n            const value = String(name || code);\n            const key = `${code}-${type}`.toLowerCase();\n            list.push({\n              key,\n              value,\n              code,\n              type\n            });\n          });\n        }\n      });\n      if (list.length) this.entities = list;\n    });\n  }\n  getCompletions(search, entities) {\n    console.log(\"getting completions for:\", search);\n    if (!entities) entities = this.entities; //if no subset of entities are passed in then use the entire list\n    else if (!entities.length) {\n      return [];\n    }\n    // console.log(\"Check for completions to '\"+search+\"' in:\",entities)\n\n    if (!entities || !entities.length) return null;\n    const regex1 = new RegExp((search.length < 3 ? '(^)(' : '(.*)(') + search + ')(.*)', 'i'); //short strings we only match begining\n    const regex2 = new RegExp('^' + search, 'i'); //short strings we only match begining\n    const fn = (e, p) => e.html = CountrySearch.getCompletionItemHtml(p == 'type' ? regex2 : regex1, e, p);\n    var results;\n    if (search.length < 3) results = entities.filter(ent => fn(ent, 'value') || fn(ent, 'code'));else results = entities.filter(ent => fn(ent, 'value') || fn(ent, 'type'));\n    this.setState({\n      results\n    });\n    return results;\n  }\n  render() {\n    var _this$state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: this.constructor.name,\n      children: [/*#__PURE__*/_jsxDEV(CompletionInput, {\n        debounce: settings.debounce,\n        onInput: this.getCompletions.bind(this),\n        onEmpty: () => {\n          this.setState({\n            results: null\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(CountryResults, {\n        results: ((_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.results) || null,\n        max: settings.maxResults\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 4\n    }, this);\n  }\n  static getCompletionItemHtml(regex, ent, prop) {\n    const match = ent[prop].match(regex);\n    if (match) {\n      const htmlArr = [];\n      if (prop == 'type') {\n        htmlArr.push( /*#__PURE__*/_jsxDEV(\"span\", {\n          children: ent.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 19\n        }, this));\n      } else {\n        if (match[1]) htmlArr.push( /*#__PURE__*/_jsxDEV(\"span\", {\n          children: match[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 32\n        }, this));\n        htmlArr.push( /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"highlight\",\n          children: match[2]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 19\n        }, this));\n        if (match[3]) htmlArr.push( /*#__PURE__*/_jsxDEV(\"span\", {\n          children: match[3]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 32\n        }, this));\n        if (prop == 'code') htmlArr.push( /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" - \", ent.value]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 20\n        }, this));\n      }\n      htmlArr.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"type\",\n        children: ent.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 18\n      }, this));\n      return htmlArr;\n    }\n    return undefined;\n  }\n}\nexport default CountrySearch;","map":{"version":3,"names":["React","CompletionInput","CountryResults","graphql","toEntityType","settings","debounce","maxResults","CountrySearch","Component","constructor","props","entities","state","results","getNamesAndCodes","then","data","list","Object","entries","forEach","t","arr","Array","isArray","type","code","name","toUpperCase","value","String","key","toLowerCase","push","length","getCompletions","search","console","log","regex1","RegExp","regex2","fn","e","p","html","getCompletionItemHtml","filter","ent","setState","render","bind","regex","prop","match","htmlArr","undefined"],"sources":["/home/buck/Documents/software/formulate_graphql/src/components/country-search.d/country-search.component.tsx"],"sourcesContent":["import React from 'react'\nimport {CompletionInput,OnSubmitHandler} from 'components/completion-input.d/completion-input.component'\nimport CountryResults from './country-results.component';\nimport \"./country-search.css\";\nimport {graphql,EntityType,toEntityType,Scalars} from 'services/countries-api/countries-api.service';\n\nexport interface Entity{\n\tvalue:Scalars['String']\n\t,code:Scalars['ID']\n\t,type:EntityType\n\t,key:Scalars['String']\n\t,html?:JSX.Element|JSX.Element[]\n}\n\nexport type NullableEntityArray=Entity[]|null;\n\nconst settings={\n\tdebounce:300\n\t,maxResults:20\n}\n\nexport interface Props {\n}\ninterface State{\n\tresults:NullableEntityArray\n}\n\nexport class CountrySearch extends React.Component<Props,State> {\n\n\tprivate entities:NullableEntityArray=null;\n\n\tconstructor(props:Props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tresults:null\n\t\t};\n\t\tgraphql.getNamesAndCodes({})\n\t\t\t.then(data=>{\n\t\t\t\tconst list:typeof this.entities=[];\n\t\t\t\tObject.entries(data).forEach(([t,arr])=>{\n\t\t\t\t\tif(Array.isArray(arr)){\n\t\t\t\t\t\tconst type=toEntityType(t)\n\t\t\t\t\t\tarr.forEach(({code,name})=>{\n\t\t\t\t\t\t\tcode=code.toUpperCase()\n\t\t\t\t\t\t\tconst value=String(name||code);\n\t\t\t\t\t\t\tconst key:Entity[\"key\"]=`${code}-${type}`.toLowerCase();\n\t\t\t\t\t\t\tlist.push({key, value, code, type});\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tif(list.length)\n\t\t\t\t\tthis.entities=list\n\t\t\t})\n\t}\n\n\tgetCompletions(search:string,entities:NullableEntityArray):NullableEntityArray {\n\t\tconsole.log(\"getting completions for:\",search);\n\t\tif(!entities)\n\t\t\tentities=this.entities; //if no subset of entities are passed in then use the entire list\n\t\telse if(!entities.length){\n\t\t\treturn [];\n\t\t}\n\t\t// console.log(\"Check for completions to '\"+search+\"' in:\",entities)\n\t\t\n\t\tif(!entities || !entities.length)\n\t\t\treturn null;\n\n\t\tconst regex1=new RegExp((search.length<3 ? '(^)(' : '(.*)(')+search+')(.*)','i'); //short strings we only match begining\n\t\tconst regex2=new RegExp('^'+search,'i'); //short strings we only match begining\n\t\tconst fn=(e:any,p:any)=>(e.html=CountrySearch.getCompletionItemHtml(p=='type'?regex2:regex1,e,p));\n\t\tvar results;\n\t\tif(search.length<3)\n\t\t\tresults=entities.filter(ent=>fn(ent,'value')||fn(ent,'code'));\n\t\telse\n\t\t\tresults=entities.filter(ent=>fn(ent,'value')||fn(ent,'type'));\n\t\tthis.setState({results})\n\t\treturn results;\n\t}\n\n\t\n\n\trender(){\n\t\treturn (\n\t\t\t<div className={this.constructor.name}>\n\t\t\t\t<CompletionInput \n\t\t\t\t\tdebounce={settings.debounce} \n\t\t\t\t\tonInput={this.getCompletions.bind(this)}\n\t\t\t\t\tonEmpty={()=>{this.setState({results:null})}}\n\t\t\t\t/>\n\t\t\t\t<CountryResults \n\t\t\t\t\tresults={this.state?.results||null}\n\t\t\t\t\tmax={settings.maxResults}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n\n\n\n\n\n\n\n\tstatic getCompletionItemHtml(regex:RegExp,ent:Entity,prop:\"value\"|\"code\"|'type'):JSX.Element[]|undefined{\n\t\tconst match=ent[prop].match(regex);\n\t\tif(match){\n\t\t\tconst htmlArr:JSX.Element[]=[];\n\t\t\tif(prop=='type'){\n\t\t\t\thtmlArr.push((<span>{ent.value}</span>))\n\t\t\t}else{\n\t\t\t\tif(match[1]) htmlArr.push((<span>{match[1]}</span>))\n\t\t\t\thtmlArr.push((<span className=\"highlight\">{match[2]}</span>))\n\t\t\t\tif(match[3]) htmlArr.push((<span>{match[3]}</span>))\n\t\t\t\tif(prop=='code')\n\t\t\t\t\thtmlArr.push((<span> - {ent.value}</span>))\n\t\t\t}\n\t\t\thtmlArr.push((<span className=\"type\">{ent.type}</span>))\n\t\t\treturn htmlArr\n\t\t}\n\t\treturn undefined;\n\t}\n\n\n}\n\nexport default CountrySearch\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}