{"ast":null,"code":"import { graphql, toEntityType, NamesAndCodesDocument } from 'services/countries-api/countries-api.service';\nfunction makeEntityArray(data) {\n  console.log(data);\n  const list = [];\n  const nonletters = /[^a-z]/g;\n  Object.entries(data).forEach(_ref => {\n    let [t, arr] = _ref;\n    if (Array.isArray(arr)) {\n      const type = toEntityType(t);\n      arr.forEach(_ref2 => {\n        let {\n          code,\n          name\n        } = _ref2;\n        name = String(name || code);\n        const key = name.toLowerCase().replaceAll(nonletters, '') + '-' + type.toLowerCase();\n        list.push({\n          name,\n          code,\n          type,\n          key\n        });\n      });\n    }\n  });\n  return list;\n}\nexport async function getNamesAndCodes() {\n  return graphql.request(NamesAndCodesDocument).then(makeEntityArray);\n}\n\n// export default getNamesAndCodes","map":{"version":3,"names":["graphql","toEntityType","NamesAndCodesDocument","makeEntityArray","data","console","log","list","nonletters","Object","entries","forEach","t","arr","Array","isArray","type","code","name","String","key","toLowerCase","replaceAll","push","getNamesAndCodes","request","then"],"sources":["/home/buck/Documents/software/formulate_graphql/src/components/country-input.d/names-and-codes.query.ts"],"sourcesContent":["import {\n\tgraphql,\n\tEntityType,\n\ttoEntityType,\n\tScalars,\n\tNamesAndCodesQuery,\n\tNamesAndCodesQueryVariables,\n\tNamesAndCodesDocument\n} from 'services/countries-api/countries-api.service';\n\n\nexport interface Entity{\n\tname:Scalars['String']\n\t,code:Scalars['ID']\n\t,type:EntityType\n\t,key:Scalars['String']\n\t,html?:JSX.Element|JSX.Element[]\n}\n\nfunction makeEntityArray(data:NamesAndCodesQuery):Array<Entity> {\n\tconsole.log(data)\n\tconst list:ReturnType<typeof makeEntityArray>=[];\n\tconst nonletters=/[^a-z]/g;\n\tObject.entries(data).forEach(([t,arr])=>{\n\t\tif(Array.isArray(arr)){\n\t\t\tconst type=toEntityType(t)\n\t\t\tarr.forEach(({code,name})=>{\n\t\t\t\tname=String(name||code);\n\t\t\t\tconst key:Entity[\"key\"]=name.toLowerCase().replaceAll(nonletters,'')+'-'+type.toLowerCase();\n\t\t\t\tlist.push({name, code, type,key});\n\t\t\t})\n\t\t}\n\t})\n\treturn list\n}\n\nexport async function getNamesAndCodes(){\n\treturn graphql.request<NamesAndCodesQuery,NamesAndCodesQueryVariables>(NamesAndCodesDocument).then(makeEntityArray)\n}\n\n// export default getNamesAndCodes\n\n\n\n"],"mappings":"AAAA,SACCA,OAAO,EAEPC,YAAY,EAIZC,qBAAqB,QACf,8CAA8C;AAWrD,SAASC,eAAe,CAACC,IAAuB,EAAgB;EAC/DC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjB,MAAMG,IAAuC,GAAC,EAAE;EAChD,MAAMC,UAAU,GAAC,SAAS;EAC1BC,MAAM,CAACC,OAAO,CAACN,IAAI,CAAC,CAACO,OAAO,CAAC,QAAW;IAAA,IAAV,CAACC,CAAC,EAACC,GAAG,CAAC;IACpC,IAAGC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EAAC;MACrB,MAAMG,IAAI,GAACf,YAAY,CAACW,CAAC,CAAC;MAC1BC,GAAG,CAACF,OAAO,CAAC,SAAe;QAAA,IAAd;UAACM,IAAI;UAACC;QAAI,CAAC;QACvBA,IAAI,GAACC,MAAM,CAACD,IAAI,IAAED,IAAI,CAAC;QACvB,MAAMG,GAAiB,GAACF,IAAI,CAACG,WAAW,EAAE,CAACC,UAAU,CAACd,UAAU,EAAC,EAAE,CAAC,GAAC,GAAG,GAACQ,IAAI,CAACK,WAAW,EAAE;QAC3Fd,IAAI,CAACgB,IAAI,CAAC;UAACL,IAAI;UAAED,IAAI;UAAED,IAAI;UAACI;QAAG,CAAC,CAAC;MAClC,CAAC,CAAC;IACH;EACD,CAAC,CAAC;EACF,OAAOb,IAAI;AACZ;AAEA,OAAO,eAAeiB,gBAAgB,GAAE;EACvC,OAAOxB,OAAO,CAACyB,OAAO,CAAiDvB,qBAAqB,CAAC,CAACwB,IAAI,CAACvB,eAAe,CAAC;AACpH;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}