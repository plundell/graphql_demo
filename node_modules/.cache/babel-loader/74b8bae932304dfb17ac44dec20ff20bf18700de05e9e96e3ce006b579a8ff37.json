{"ast":null,"code":"var _jsxFileName = \"/home/buck/Documents/software/formulate_graphql/src/components/country-search.d/country-results.component.tsx\";\nimport React from 'react';\nimport { TileGrid } from 'components/tiles.d/tile-grid.component';\nimport { graphql } from 'services/countries-api/countries-api.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst settings = {\n  markClass: 'marked'\n};\nfunction randomDelay(resolveWith) {\n  return new Promise(resolve => {\n    const delay = Math.random() * (3000 - 1000) + 1000;\n    setTimeout(() => {\n      // console.log('resolving with',resolveWith)\n      resolve(resolveWith);\n    }, delay);\n  });\n}\nexport default class CountryResults extends React.Component {\n  log() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    console.log(this._ID, `<${this.constructor.name}>`, ...args);\n  }\n  constructor(props) {\n    var _this$props$results;\n    super(props);\n    this._ID = void 0;\n    this.cache = {};\n    this.buildTile = ent => {\n      const tile = {\n        title: ent.value,\n        classNames: [ent.type.toLowerCase()]\n      };\n      const cls = settings.markClass;\n      tile.onClick = function toggleSelected() {\n        const i = tile.classNames.indexOf(cls);\n        if (i > -1) {\n          tile.classNames.splice(i, 1);\n          this === null || this === void 0 ? void 0 : this.elem.classList.remove(cls);\n        } else {\n          tile.classNames.push(settings.markClass);\n          this === null || this === void 0 ? void 0 : this.elem.classList.add(cls);\n        }\n      };\n      const promise = this[`build${ent.type}TileContent`](ent);\n      tile.content = promise;\n      promise.then(content => {\n        tile.content = content;\n      });\n      return tile;\n    };\n    this.buildCountryTileContent = ent => {\n      return graphql.getCountryDetails(ent).then(data => {\n        const html = [];\n        for (let [prop, value] of Object.entries(data.countries[0])) {\n          if (value) {\n            //turn non-strings into strings\n            if (typeof value == 'object') {\n              if (Array.isArray(value)) value = value.map(v => v.name).join(', '); //continent\n              else value = value.name; //languages\n            }\n\n            html.push( /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [prop, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 16\n            }, this));\n          }\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: html\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this);\n      });\n    };\n    this.buildContinentTileContent = ent => {\n      return randomDelay( /*#__PURE__*/_jsxDEV(\"span\", {\n        children: ent.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 22\n      }, this));\n    };\n    this.buildLanguageTileContent = ent => {\n      return randomDelay( /*#__PURE__*/_jsxDEV(\"span\", {\n        children: ent.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 22\n      }, this));\n    };\n    this.getTiles = () => {\n      if (this.props.results) {\n        const tiles = {};\n        var i = 0;\n        for (const ent of this.props.results) {\n          tiles[ent.key] = this.getTile(ent);\n        }\n        return tiles;\n      } else {\n        return null;\n      }\n    };\n    this._ID = Math.floor(Math.random() * 10000);\n    this.log(\"creating\", (_this$props$results = this.props.results) === null || _this$props$results === void 0 ? void 0 : _this$props$results.map(ent => ent.value).join(', '));\n    if (props.register) props.register(this);\n  }\n  get selected() {\n    return Object.entries(this.cache).filter(_ref => {\n      var _tile$classNames;\n      let [key, tile] = _ref;\n      return (_tile$classNames = tile.classNames) === null || _tile$classNames === void 0 ? void 0 : _tile$classNames.includes(settings.markClass);\n    }).map(_ref2 => {\n      let [key] = _ref2;\n      return key;\n    });\n  }\n  clearSelected() {\n    const keys = this.selected;\n    if (keys.length) {\n      for (const key of keys) {\n        var _this$cache$key$onCli;\n        (_this$cache$key$onCli = this.cache[key].onClick) === null || _this$cache$key$onCli === void 0 ? void 0 : _this$cache$key$onCli.call(null);\n      }\n      this.forceUpdate();\n    }\n  }\n  getTile(ent) {\n    if (this.cache.hasOwnProperty(ent.key) == false) {\n      this.cache[ent.key] = this.buildTile(ent);\n    }\n    return this.cache[ent.key];\n  }\n  render() {\n    const tiles = this.getTiles();\n    if (tiles) {\n      if (Object.keys(tiles).length) this.log(\"rendering:\", Object.values(tiles).map(t => `${t.title}${t.content instanceof Promise ? '*' : ''}`).join(', '));else this.log(\"no results:\", this);\n    } else {\n      this.log(\"not started yet\");\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: this.constructor.name,\n      children: /*#__PURE__*/_jsxDEV(TileGrid, {\n        tiles: tiles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 4\n    }, this);\n  }\n}","map":{"version":3,"names":["React","TileGrid","graphql","settings","markClass","randomDelay","resolveWith","Promise","resolve","delay","Math","random","setTimeout","CountryResults","Component","log","args","console","_ID","constructor","name","props","cache","buildTile","ent","tile","title","value","classNames","type","toLowerCase","cls","onClick","toggleSelected","i","indexOf","splice","elem","classList","remove","push","add","promise","content","then","buildCountryTileContent","getCountryDetails","data","html","prop","Object","entries","countries","Array","isArray","map","v","join","buildContinentTileContent","buildLanguageTileContent","getTiles","results","tiles","key","getTile","floor","register","selected","filter","includes","clearSelected","keys","length","call","forceUpdate","hasOwnProperty","render","values","t"],"sources":["/home/buck/Documents/software/formulate_graphql/src/components/country-search.d/country-results.component.tsx"],"sourcesContent":["import React from 'react'\nimport {TileGrid, Props as GridProps,Tile} from 'components/tiles.d/tile-grid.component'\nimport {Entity, NullableEntityArray} from './country-search.component'\nimport {graphql} from 'services/countries-api/countries-api.service';\n\ninterface Props {\n\tresults:NullableEntityArray\n\tregister?:(self:CountryResults)=>void\n}\n\ntype TileProps=NonNullable<GridProps['tiles']>[keyof GridProps['tiles']] ;\ntype TileRecords=NonNullable<GridProps['tiles']>\n\t\nconst settings={\n\tmarkClass:'marked'\n}\n\nfunction randomDelay<T>(resolveWith:T):Promise<T>{\n\treturn new Promise(resolve=>{\n\t\tconst delay=Math.random() * (3000 - 1000) + 1000;\n\t\tsetTimeout(()=>{\n\t\t\t// console.log('resolving with',resolveWith)\n\t\t\tresolve(resolveWith);\n\t\t},delay);\n\t})\n}\n\nexport default class CountryResults extends React.Component<Props> {\n\tprivate _ID:number;\n\tlog(...args:any[]){\n\t\tconsole.log(this._ID,`<${this.constructor.name}>`,...args);\n\t}\n\n\tprivate cache:TileRecords={};\n\t\n\tconstructor(props:Props){\n\t\tsuper(props);\n\t\tthis._ID=Math.floor(Math.random()*10000);\n\t\tthis.log(\"creating\",this.props.results?.map(ent=>ent.value).join(', '));\n\t\tif(props.register)\n\t\t\tprops.register(this);\n\t}\n\n\tget selected(){\n\t\treturn Object.entries(this.cache)\n\t\t\t.filter(([key,tile])=>tile.classNames?.includes(settings.markClass))\n\t\t\t.map(([key])=>key)\n\t}\n\n\tclearSelected(){\n\t\tconst keys=this.selected;\n\t\tif(keys.length){\n\t\t\tfor(const key of keys){\n\t\t\t\tthis.cache[key].onClick?.call(null)\n\t\t\t}\n\t\t\tthis.forceUpdate();\n\t\t}\n\t}\n\n\tprivate getTile(ent:Entity):TileProps{\n\t\tif(this.cache.hasOwnProperty(ent.key)==false){\n\t\t\tthis.cache[ent.key]=this.buildTile(ent);\n\t\t}\n\t\treturn this.cache[ent.key];\n\t}\n\n\tprivate buildTile=(ent:Entity):TileProps=>{\n\t\tconst tile:any={\n\t\t\ttitle:ent.value\n\t\t\t,classNames:[ent.type.toLowerCase()]\n\t\t};\n\t\tconst cls=settings.markClass;\n\t\ttile.onClick=function toggleSelected(this:Tile|null){\n\t\t\tconst i=tile.classNames.indexOf(cls)\n\t\t\tif(i>-1){\n\t\t\t\ttile.classNames.splice(i,1)\n\t\t\t\tthis?.elem.classList.remove(cls)\n\t\t\t}else{\n\t\t\t\ttile.classNames.push(settings.markClass);\n\t\t\t\tthis?.elem.classList.add(cls);\n\t\t\t}\n\t\t}\n\t\tconst promise=this[`build${ent.type}TileContent`](ent);\n\t\ttile.content=promise;\n\t\tpromise.then(content=>{tile.content=content})\n\t\n\t\treturn tile;\n\t}\n\tprivate buildCountryTileContent=(ent:Entity):Promise<JSX.Element>=>{\n\t\treturn graphql.getCountryDetails(ent).then(data=>{\n\t\t\tconst html:JSX.Element[]=[];\n\t\t\tfor(let [prop,value] of Object.entries(data.countries[0])){\n\t\t\t\tif(value){\n\t\t\t\t\t//turn non-strings into strings\n\t\t\t\t\tif(typeof value=='object'){\n\t\t\t\t\t\tif(Array.isArray(value)) \n\t\t\t\t\t\t\tvalue=value.map(v=>v.name).join(', '); //continent\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tvalue=value.name //languages\n\t\t\t\t\t}\n\t\t\t\t\thtml.push(<div><span>{prop}:</span><span>{value}</span></div>)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn <div>{html}</div>\n\t\t})\n\t}\n\tprivate buildContinentTileContent=(ent:Entity):Promise<JSX.Element>=>{\n\t\treturn randomDelay(<span>{ent.type}</span>);\n\t}\n\tprivate buildLanguageTileContent=(ent:Entity):Promise<JSX.Element>=>{\n\t\treturn randomDelay(<span>{ent.type}</span>);\n\t}\n\n\tprivate getTiles=():GridProps['tiles']=>{\n\t\tif(this.props.results){\n\t\t\tconst tiles:TileRecords={};\n\t\t\tvar i=0;\n\t\t    for(const ent of this.props.results){\n\t\t    \ttiles[ent.key]=this.getTile(ent);\n\t\t\t}\n\t\t\treturn tiles;\n\t\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\trender(){\n\t\tconst tiles=this.getTiles();\n\t\tif(tiles){\n\t\t\tif(Object.keys(tiles).length)\n\t\t\t\tthis.log(\"rendering:\",Object.values(tiles).map(t=>(`${t.title}${t.content instanceof Promise ?'*':''}`)).join(', '));\n\t\t\telse \n\t\t\t\tthis.log(\"no results:\",this)\n\t\t}else{\n\t\t\tthis.log(\"not started yet\")\n\t\t}\n\t\treturn (\n\t\t\t<div className={this.constructor.name}>\n\t\t\t\t<TileGrid tiles={tiles}/>\n\t\t\t</div>\n\t\t)\n\t}\n\n\n\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}