{"ast":null,"code":"import { GraphQLClient } from 'graphql-request';\n\n// The ./types.ts file is generated by the module graphql-codegen (which has to be run manually) \n// from all .graphql files in this project. We export it so others don't have to import 2 things\nexport * from './types';\nexport const uri = \"https://countries.trevorblades.com\";\nexport const graphql = new GraphQLClient(uri, {\n  headers: {}\n});\nexport let EntityType;\n(function (EntityType) {\n  EntityType[EntityType[\"Country\"] = 0] = \"Country\";\n  EntityType[EntityType[\"Continent\"] = 1] = \"Continent\";\n  EntityType[EntityType[\"Language\"] = 2] = \"Language\";\n})(EntityType || (EntityType = {}));\nfunction toEntityType(x) {}\nfunction toQueryName(x) {}\nconst entityTypes = Object.values(EntityType);\nexport function assertEntityType(x) {\n  if (typeof x == 'string' && entityTypes.includes(x)) return x;else throw new TypeError(\"Not an entity type: \" + String(x));\n}","map":{"version":3,"names":["GraphQLClient","uri","graphql","headers","EntityType","toEntityType","x","toQueryName","entityTypes","Object","values","assertEntityType","includes","TypeError","String"],"sources":["/home/buck/Documents/software/formulate_graphql/src/services/countries-api/countries-api.service.ts"],"sourcesContent":["import { GraphQLClient } from 'graphql-request'\n\n// The ./types.ts file is generated by the module graphql-codegen (which has to be run manually) \n// from all .graphql files in this project. We export it so others don't have to import 2 things\nexport * from './types'\n\nexport const uri = \"https://countries.trevorblades.com\";\n\nexport const graphql = new GraphQLClient(uri, { headers: {} });\n\nexport enum EntityType {\n\t'Country'\n\t,'Continent'\n\t,'Language'\n}\nfunction toEntityType(x:string){\n\n}\nfunction toQueryName(x:string){\n\t\n}\nconst entityTypes=Object.values(EntityType);\n\nexport function assertEntityType(x:any):EntityType{\n\tif(typeof x=='string' && entityTypes.includes(x))\n\t\treturn x as unknown as EntityType\n\telse\n\t\tthrow new TypeError(\"Not an entity type: \"+String(x));\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,iBAAiB;;AAE/C;AACA;AACA,cAAc,SAAS;AAEvB,OAAO,MAAMC,GAAG,GAAG,oCAAoC;AAEvD,OAAO,MAAMC,OAAO,GAAG,IAAIF,aAAa,CAACC,GAAG,EAAE;EAAEE,OAAO,EAAE,CAAC;AAAE,CAAC,CAAC;AAE9D,WAAYC,UAAU;AAIrB,WAJWA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;AAAA,GAAVA,UAAU,KAAVA,UAAU;AAKtB,SAASC,YAAY,CAACC,CAAQ,EAAC,CAE/B;AACA,SAASC,WAAW,CAACD,CAAQ,EAAC,CAE9B;AACA,MAAME,WAAW,GAACC,MAAM,CAACC,MAAM,CAACN,UAAU,CAAC;AAE3C,OAAO,SAASO,gBAAgB,CAACL,CAAK,EAAY;EACjD,IAAG,OAAOA,CAAC,IAAE,QAAQ,IAAIE,WAAW,CAACI,QAAQ,CAACN,CAAC,CAAC,EAC/C,OAAOA,CAAC,CAAyB,KAEjC,MAAM,IAAIO,SAAS,CAAC,sBAAsB,GAACC,MAAM,CAACR,CAAC,CAAC,CAAC;AACvD"},"metadata":{},"sourceType":"module","externalDependencies":[]}