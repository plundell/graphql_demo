{"ast":null,"code":"var _jsxFileName = \"/home/buck/Documents/software/formulate_graphql/src/components/country-input.d/country-input.component.tsx\";\nimport React from 'react';\nimport { Input } from 'components/input.component';\nimport { getNamesAndCodes, Entity } from './names-and-codes.query';\nimport assert from 'services/assert.helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class CountryInput extends React.Component {\n  constructor() {\n    super(arguments);\n    this.entities = void 0;\n    getNamesAndCodes().then(ent => {\n      if (ent.length) {\n        this.entities = ent;\n      }\n    });\n  }\n  getCompletions(search, entities) {\n    if (!this.entities)\n      //before we get entities from server there is no way to do completions\n      return null;\n    if (!entities || !entities.length) entities = this.entities; //if no subset of entities are passed in then use the entire list\n    else assert.typedArray(entities, Entity);\n    assert.type(search, 'string');\n    const regex = new RegExp(search.length < 3 ? '^' : '' + search, 'i');\n    //short strings we only match begining, always case insensistive\n    if (search.length < 3) entities = entities.filter(ent => ent.name.match(regex) || ent.code.match(regex));else entities = entities.filter(ent => ent.name.match(regex));\n    return entities.length ? entities : null;\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(Input, {\n      id: \"search\",\n      debounce: 500,\n      getCompletions: this.getCompletions.bind(this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Input","getNamesAndCodes","Entity","assert","CountryInput","Component","constructor","arguments","entities","then","ent","length","getCompletions","search","typedArray","type","regex","RegExp","filter","name","match","code","render","bind"],"sources":["/home/buck/Documents/software/formulate_graphql/src/components/country-input.d/country-input.component.tsx"],"sourcesContent":["import React from 'react'\nimport {Input,getCompletionSignature} from 'components/input.component'\nimport {getNamesAndCodes,Entity} from './names-and-codes.query'\nimport assert from 'services/assert.helper'\n\n\nexport default class CountryInput extends React.Component {\n\n\tprivate entities?:Array<Entity>;\n\n\tconstructor(){\n\t\tsuper(arguments)\n\t\tgetNamesAndCodes().then(ent=>{if(ent.length){this.entities=ent}});\n\t}\n\n\tgetCompletions(search:string,entities?:Array<Entity>):Array<Entity>|null {\n\t\tif(!this.entities) //before we get entities from server there is no way to do completions\n\t\t\treturn null;\n\t\tif(!entities || !entities.length)\n\t\t\tentities=this.entities; //if no subset of entities are passed in then use the entire list\n\t\telse\n\t\t\tassert.typedArray(entities,Entity);\n\t\tassert.type(search,'string');\n\t\tconst regex=new RegExp(search.length<3 ? '^' : ''+search,'i'); \n\t\t//short strings we only match begining, always case insensistive\n\t\tif(search.length<3)\n\t\t\tentities=entities.filter(ent=>ent.name.match(regex)||ent.code.match(regex));\n\t\telse\n\t\t\tentities=entities.filter(ent=>ent.name.match(regex));\n\t\t\n\t\treturn (entities.length ? entities : null);\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<Input id=\"search\" debounce={500} getCompletions={this.getCompletions.bind(this)} />\n\t\t)\n\t}\n}\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,KAAK,QAA8B,4BAA4B;AACvE,SAAQC,gBAAgB,EAACC,MAAM,QAAO,yBAAyB;AAC/D,OAAOC,MAAM,MAAM,wBAAwB;AAAA;AAG3C,eAAe,MAAMC,YAAY,SAASL,KAAK,CAACM,SAAS,CAAC;EAIzDC,WAAW,GAAE;IACZ,KAAK,CAACC,SAAS,CAAC;IAAA,KAHTC,QAAQ;IAIfP,gBAAgB,EAAE,CAACQ,IAAI,CAACC,GAAG,IAAE;MAAC,IAAGA,GAAG,CAACC,MAAM,EAAC;QAAC,IAAI,CAACH,QAAQ,GAACE,GAAG;MAAA;IAAC,CAAC,CAAC;EAClE;EAEAE,cAAc,CAACC,MAAa,EAACL,QAAuB,EAAqB;IACxE,IAAG,CAAC,IAAI,CAACA,QAAQ;MAAE;MAClB,OAAO,IAAI;IACZ,IAAG,CAACA,QAAQ,IAAI,CAACA,QAAQ,CAACG,MAAM,EAC/BH,QAAQ,GAAC,IAAI,CAACA,QAAQ,CAAC,CAAC;IAAA,KAExBL,MAAM,CAACW,UAAU,CAACN,QAAQ,EAACN,MAAM,CAAC;IACnCC,MAAM,CAACY,IAAI,CAACF,MAAM,EAAC,QAAQ,CAAC;IAC5B,MAAMG,KAAK,GAAC,IAAIC,MAAM,CAACJ,MAAM,CAACF,MAAM,GAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAACE,MAAM,EAAC,GAAG,CAAC;IAC7D;IACA,IAAGA,MAAM,CAACF,MAAM,GAAC,CAAC,EACjBH,QAAQ,GAACA,QAAQ,CAACU,MAAM,CAACR,GAAG,IAAEA,GAAG,CAACS,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,IAAEN,GAAG,CAACW,IAAI,CAACD,KAAK,CAACJ,KAAK,CAAC,CAAC,CAAC,KAE5ER,QAAQ,GAACA,QAAQ,CAACU,MAAM,CAACR,GAAG,IAAEA,GAAG,CAACS,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,CAAC;IAErD,OAAQR,QAAQ,CAACG,MAAM,GAAGH,QAAQ,GAAG,IAAI;EAC1C;EAEAc,MAAM,GAAE;IACP,oBACC,QAAC,KAAK;MAAC,EAAE,EAAC,QAAQ;MAAC,QAAQ,EAAE,GAAI;MAAC,cAAc,EAAE,IAAI,CAACV,cAAc,CAACW,IAAI,CAAC,IAAI;IAAE;MAAA;MAAA;MAAA;IAAA,QAAG;EAEtF;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}