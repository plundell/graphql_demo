{"ast":null,"code":"import { graphql, toEntityType, NamesAndCodesDocument } from 'services/countries-api/countries-api.service';\nfunction makeEntityArray(data) {\n  console.log(data);\n  const list = [];\n  const nonletters = /[^a-z]/g;\n  const keys = [];\n  Object.entries(data).forEach(_ref => {\n    let [t, arr] = _ref;\n    if (Array.isArray(arr)) {\n      const type = toEntityType(t);\n      arr.forEach(_ref2 => {\n        let {\n          code,\n          name\n        } = _ref2;\n        code = code.toUpperCase();\n        name = String(name || code);\n        const key = name.toLowerCase().replaceAll(nonletters, '') + '-' + type.toLowerCase();\n        list.push({\n          name,\n          code,\n          type,\n          key\n        });\n        const duplicates = list.filter(ent => ent.key == key);\n        if (duplicates.length > 1) console.error(\"Duplicate key \" + key, duplicates);\n      });\n    }\n  });\n  return list;\n}\nexport async function getNamesAndCodes() {\n  return graphql.request(NamesAndCodesDocument).then(makeEntityArray);\n}\n\n// export default getNamesAndCodes","map":{"version":3,"names":["graphql","toEntityType","NamesAndCodesDocument","makeEntityArray","data","console","log","list","nonletters","keys","Object","entries","forEach","t","arr","Array","isArray","type","code","name","toUpperCase","String","key","toLowerCase","replaceAll","push","duplicates","filter","ent","length","error","getNamesAndCodes","request","then"],"sources":["/home/buck/Documents/software/formulate_graphql/src/components/country-input.d/names-and-codes.query.ts"],"sourcesContent":["import {\n\tgraphql,\n\tEntityType,\n\ttoEntityType,\n\tScalars,\n\tNamesAndCodesQuery,\n\tNamesAndCodesQueryVariables,\n\tNamesAndCodesDocument\n} from 'services/countries-api/countries-api.service';\n\n\nexport interface Entity{\n\tname:Scalars['String']\n\t,code:Scalars['ID']\n\t,type:EntityType\n\t,key:Scalars['String']\n\t,html?:JSX.Element|JSX.Element[]\n}\n\nfunction makeEntityArray(data:NamesAndCodesQuery):Array<Entity> {\n\tconsole.log(data)\n\tconst list:ReturnType<typeof makeEntityArray>=[];\n\tconst nonletters=/[^a-z]/g;\n\tconst keys:Array<Entity>=[];\n\tObject.entries(data).forEach(([t,arr])=>{\n\t\tif(Array.isArray(arr)){\n\t\t\tconst type=toEntityType(t)\n\t\t\tarr.forEach(({code,name})=>{\n\t\t\t\tcode=code.toUpperCase()\n\t\t\t\tname=String(name||code);\n\t\t\t\tconst key:Entity[\"key\"]=name.toLowerCase().replaceAll(nonletters,'')+'-'+type.toLowerCase();\n\t\t\t\tlist.push({name, code, type,key});\n\t\t\t\tconst duplicates=list.filter(ent=>ent.key==key)\n\t\t\t\tif(duplicates.length>1)\n\t\t\t\t\tconsole.error(\"Duplicate key \"+key,duplicates);\n\t\t\t})\n\t\t}\n\t})\n\treturn list\n}\n\nexport async function getNamesAndCodes(){\n\treturn graphql.request<NamesAndCodesQuery,NamesAndCodesQueryVariables>(NamesAndCodesDocument).then(makeEntityArray)\n}\n\n// export default getNamesAndCodes\n\n\n\n"],"mappings":"AAAA,SACCA,OAAO,EAEPC,YAAY,EAIZC,qBAAqB,QACf,8CAA8C;AAWrD,SAASC,eAAe,CAACC,IAAuB,EAAgB;EAC/DC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjB,MAAMG,IAAuC,GAAC,EAAE;EAChD,MAAMC,UAAU,GAAC,SAAS;EAC1B,MAAMC,IAAkB,GAAC,EAAE;EAC3BC,MAAM,CAACC,OAAO,CAACP,IAAI,CAAC,CAACQ,OAAO,CAAC,QAAW;IAAA,IAAV,CAACC,CAAC,EAACC,GAAG,CAAC;IACpC,IAAGC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EAAC;MACrB,MAAMG,IAAI,GAAChB,YAAY,CAACY,CAAC,CAAC;MAC1BC,GAAG,CAACF,OAAO,CAAC,SAAe;QAAA,IAAd;UAACM,IAAI;UAACC;QAAI,CAAC;QACvBD,IAAI,GAACA,IAAI,CAACE,WAAW,EAAE;QACvBD,IAAI,GAACE,MAAM,CAACF,IAAI,IAAED,IAAI,CAAC;QACvB,MAAMI,GAAiB,GAACH,IAAI,CAACI,WAAW,EAAE,CAACC,UAAU,CAAChB,UAAU,EAAC,EAAE,CAAC,GAAC,GAAG,GAACS,IAAI,CAACM,WAAW,EAAE;QAC3FhB,IAAI,CAACkB,IAAI,CAAC;UAACN,IAAI;UAAED,IAAI;UAAED,IAAI;UAACK;QAAG,CAAC,CAAC;QACjC,MAAMI,UAAU,GAACnB,IAAI,CAACoB,MAAM,CAACC,GAAG,IAAEA,GAAG,CAACN,GAAG,IAAEA,GAAG,CAAC;QAC/C,IAAGI,UAAU,CAACG,MAAM,GAAC,CAAC,EACrBxB,OAAO,CAACyB,KAAK,CAAC,gBAAgB,GAACR,GAAG,EAACI,UAAU,CAAC;MAChD,CAAC,CAAC;IACH;EACD,CAAC,CAAC;EACF,OAAOnB,IAAI;AACZ;AAEA,OAAO,eAAewB,gBAAgB,GAAE;EACvC,OAAO/B,OAAO,CAACgC,OAAO,CAAiD9B,qBAAqB,CAAC,CAAC+B,IAAI,CAAC9B,eAAe,CAAC;AACpH;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}