{"ast":null,"code":"var _jsxFileName = \"/home/buck/Documents/software/formulate_graphql/src/components/country-search.d/country-results.component.tsx\";\nimport React from 'react';\nimport { TileGrid } from 'components/tiles.d/tile-grid.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction randomDelay(resolveWith) {\n  return new Promise(resolve => {\n    const delay = Math.random() * (3000 - 1000) + 1000;\n    setTimeout(() => {\n      // console.log('resolving with',resolveWith)\n      resolve(resolveWith);\n    }, delay);\n  });\n}\nexport default class CountryResults extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.cache = {};\n    this.buildTile = ent => {\n      const tile = {\n        title: ent.value,\n        className: ent.type.toLowerCase()\n      };\n      tile.content = this[`build${ent.type}TileContent`](ent);\n      tile.content.then(content => {\n        tile.content = content;\n      });\n      return tile;\n    };\n    this.buildCountryTileContent = ent => {\n      return randomDelay( /*#__PURE__*/_jsxDEV(\"span\", {\n        children: ent.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 22\n      }, this));\n    };\n    this.buildContinentTileContent = ent => {\n      return randomDelay( /*#__PURE__*/_jsxDEV(\"span\", {\n        children: ent.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 22\n      }, this));\n    };\n    this.buildLanguageTileContent = ent => {\n      return randomDelay( /*#__PURE__*/_jsxDEV(\"span\", {\n        children: ent.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 22\n      }, this));\n    };\n  }\n  get output() {\n    const tiles = {};\n    if (this.props.results && this.props.results.length) {\n      for (const ent of this.props.results) {\n        if (!this.cache.hasOwnProperty(ent.key)) this.cache[ent.key] = this.buildTile(ent);\n        tiles[ent.key] = this.cache[ent.key];\n      }\n    }\n    if (this.props.results) {\n      const tileNames = this.props.results.map(ent => ent.value).join(', ');\n      console.log(\"Grid:\", tileNames);\n    }\n    return tiles;\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"output\",\n      children: this.props.results ? this.props.results.length ? /*#__PURE__*/_jsxDEV(TileGrid, {\n        tiles: this.output\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"emptyResults\",\n        children: \"No results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }, this);\n  }\n}","map":{"version":3,"names":["React","TileGrid","randomDelay","resolveWith","Promise","resolve","delay","Math","random","setTimeout","CountryResults","Component","cache","buildTile","ent","tile","title","value","className","type","toLowerCase","content","then","buildCountryTileContent","buildContinentTileContent","buildLanguageTileContent","output","tiles","props","results","length","hasOwnProperty","key","tileNames","map","join","console","log","render"],"sources":["/home/buck/Documents/software/formulate_graphql/src/components/country-search.d/country-results.component.tsx"],"sourcesContent":["import React from 'react'\nimport {TileGrid, Props as GridProps} from 'components/tiles.d/tile-grid.component'\nimport {Entity, NullableEntityArray} from './country-search.component'\n\ninterface Props {\n\tresults:NullableEntityArray\n}\n\n\nfunction randomDelay<T>(resolveWith:T):Promise<T>{\n\treturn new Promise(resolve=>{\n\t\tconst delay=Math.random() * (3000 - 1000) + 1000;\n\t\tsetTimeout(()=>{\n\t\t\t// console.log('resolving with',resolveWith)\n\t\t\tresolve(resolveWith);\n\t\t},delay);\n\t})\n}\n\nexport default class CountryResults extends React.Component<Props> {\n\t\n\tprivate cache:GridProps['tiles']={};\n\n\tget output() {\n\t\tconst tiles:GridProps['tiles']={};\n\t\tif(this.props.results && this.props.results.length){\n\t\t    for(const ent of this.props.results){\n\t\t    \tif(!this.cache.hasOwnProperty(ent.key))\n\t\t\t\t\tthis.cache[ent.key]=this.buildTile(ent)\n\t\t    \ttiles[ent.key]=this.cache[ent.key];\n\t\t\t}\n\t\t}\n\t\tif(this.props.results){\n\t\t\tconst tileNames=this.props.results.map(ent=>ent.value).join(', ');\n\t\t\tconsole.log(\"Grid:\",tileNames);\n\t\t}\n\t\treturn tiles;\n\t}\n\tprivate buildTile=(ent:Entity):GridProps['tiles'][keyof GridProps]=>{\n\t\tconst tile:any={title:ent.value, className:ent.type.toLowerCase()};\n\t\ttile.content=this[`build${ent.type}TileContent`](ent);\n\t\ttile.content.then((content:JSX.Element)=>{tile.content=content})\n\t\treturn tile;\n\t}\n\n\tprivate buildCountryTileContent=(ent:Entity):Promise<JSX.Element>=>{\n\t\treturn randomDelay(<span>{ent.type}</span>);\n\t}\n\tprivate buildContinentTileContent=(ent:Entity):Promise<JSX.Element>=>{\n\t\treturn randomDelay(<span>{ent.type}</span>);\n\t}\n\tprivate buildLanguageTileContent=(ent:Entity):Promise<JSX.Element>=>{\n\t\treturn randomDelay(<span>{ent.type}</span>);\n\t}\n\n\trender(){\n\t\treturn (<div id=\"output\">{\n\t\t\tthis.props.results ?\n\t\t\t\tthis.props.results.length ?\n\t\t\t\t\t<TileGrid tiles={this.output}/>\n\t\t\t\t\t:<div className='emptyResults'>No results</div>\n\t\t\t\t:''\n\t\t}</div>)\n\t}\n\n\n\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}