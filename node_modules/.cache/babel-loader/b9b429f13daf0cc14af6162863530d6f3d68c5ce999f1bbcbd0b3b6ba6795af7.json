{"ast":null,"code":"import graphql from './graphql';\nexport default _c2 = graphql.listNames().then(_c = data => {\n  const list = [];\n  Object.entries(data).forEach(_ref => {\n    let [type, arr] = _ref;\n    if (arr != 'Query') {\n      arr.forEach(_ref2 => {\n        let {\n          code,\n          name\n        } = _ref2;\n        list.push({\n          code,\n          name: String(name),\n          type: type\n        });\n      });\n    }\n  });\n  return list;\n});\nvar _c, _c2;\n$RefreshReg$(_c, \"%default%$graphql.listNames()\\n  .then\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["graphql","listNames","then","data","list","Object","entries","forEach","type","arr","code","name","push","String"],"sources":["/home/buck/Documents/software/formulate_graphql/src/listNames.ts"],"sourcesContent":["import graphql from './graphql';\nimport { EntityType, EntityShort } from './types';\n\nexport default graphql.listNames()\n  .then(data=>{\n    const list:Array<EntityShort>=[];\n    Object.entries(data).forEach(([type,arr])=>{\n    \tif(arr!='Query'){\n\t    \tarr.forEach(({code,name})=>{\n\t    \t\tlist.push({code, name:String(name), type:(type as unknown as EntityType)});\n\t    \t})\n    \t}\n    })\n    return list\n  }\n)\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAG/B,qBAAeA,OAAO,CAACC,SAAS,EAAE,CAC/BC,IAAI,MAACC,IAAI,IAAE;EACV,MAAMC,IAAuB,GAAC,EAAE;EAChCC,MAAM,CAACC,OAAO,CAACH,IAAI,CAAC,CAACI,OAAO,CAAC,QAAc;IAAA,IAAb,CAACC,IAAI,EAACC,GAAG,CAAC;IACvC,IAAGA,GAAG,IAAE,OAAO,EAAC;MACfA,GAAG,CAACF,OAAO,CAAC,SAAe;QAAA,IAAd;UAACG,IAAI;UAACC;QAAI,CAAC;QACvBP,IAAI,CAACQ,IAAI,CAAC;UAACF,IAAI;UAAEC,IAAI,EAACE,MAAM,CAACF,IAAI,CAAC;UAAEH,IAAI,EAAEA;QAA8B,CAAC,CAAC;MAC3E,CAAC,CAAC;IACH;EACD,CAAC,CAAC;EACF,OAAOJ,IAAI;AACb,CAAC,CACF;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}