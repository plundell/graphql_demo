{"ast":null,"code":"export default {\n  type: assertType,\n  typedArray: assertTypedArray\n};\nfunction checkType(x, type) {\n  if (typeof type == 'string') {\n    return typeof x == type;\n  } else if (x && typeof x == 'object') {\n    return type.every(_ref => {\n      let [key, t] = _ref;\n      return checkType(x[key], t);\n    });\n  }\n  return false;\n}\nfunction assertType(x, type, prettyType) {\n  if (checkType(x, type) == false) throw new TypeError(`Expected a ${String(prettyType || type)}, but got: (${typeof x})${String(x)}`);\n}\nfunction assertTypedArray(arr, type, prettyType) {\n  if (!Array.isArray(arr)) throw new TypeError(`Expected typed array, but got: (${typeof arr})${String(arr)}`);\n  const i = arr.findIndex(x => checkType(x, type) == false);\n  if (i > -1) throw new TypeError(`Expected ${String(prettyType || type)}[], but index ${i} was: (${typeof arr[i]})${String(arr[i])}`);\n}","map":{"version":3,"names":["type","assertType","typedArray","assertTypedArray","checkType","x","every","key","t","prettyType","TypeError","String","arr","Array","isArray","i","findIndex"],"sources":["/home/buck/Documents/software/formulate_graphql/src/services/assert.helper.ts"],"sourcesContent":["\nexport default {\n\ttype:assertType\n\t,typedArray:assertTypedArray\n}\n\ntype stringOrEntries=string|ReturnType<typeof Object.entries>\n\nfunction checkType(x:any,type:stringOrEntries):Boolean{\n\tif(typeof type=='string'){\n\t\treturn typeof x==type\n\t}else if(x && typeof x=='object'){\n\t\treturn type.every(([key,t])=>checkType(x[key],t))\n\t}\n\treturn false\n}\n\nfunction assertType(x:any,type:stringOrEntries,prettyType?:string):void{\n\tif(checkType(x,type)==false)\n\t\tthrow new TypeError(`Expected a ${String(prettyType||type)}, but got: (${typeof x})${String(x)}`);\n}\n\nfunction assertTypedArray(arr:any,type:stringOrEntries,prettyType?:string):void{\n\tif(!Array.isArray(arr))\n\t\tthrow new TypeError(`Expected typed array, but got: (${typeof arr})${String(arr)}`);\n\n\tconst i=arr.findIndex(x=>checkType(x,type)==false);\n\tif(i>-1)\n\t\tthrow new TypeError(`Expected ${String(prettyType||type)}[], but index ${i} was: (${typeof arr[i]})${String(arr[i])}`)\n\n}\n\n"],"mappings":"AACA,eAAe;EACdA,IAAI,EAACC,UAAU;EACdC,UAAU,EAACC;AACb,CAAC;AAID,SAASC,SAAS,CAACC,CAAK,EAACL,IAAoB,EAAS;EACrD,IAAG,OAAOA,IAAI,IAAE,QAAQ,EAAC;IACxB,OAAO,OAAOK,CAAC,IAAEL,IAAI;EACtB,CAAC,MAAK,IAAGK,CAAC,IAAI,OAAOA,CAAC,IAAE,QAAQ,EAAC;IAChC,OAAOL,IAAI,CAACM,KAAK,CAAC;MAAA,IAAC,CAACC,GAAG,EAACC,CAAC,CAAC;MAAA,OAAGJ,SAAS,CAACC,CAAC,CAACE,GAAG,CAAC,EAACC,CAAC,CAAC;IAAA,EAAC;EAClD;EACA,OAAO,KAAK;AACb;AAEA,SAASP,UAAU,CAACI,CAAK,EAACL,IAAoB,EAACS,UAAkB,EAAM;EACtE,IAAGL,SAAS,CAACC,CAAC,EAACL,IAAI,CAAC,IAAE,KAAK,EAC1B,MAAM,IAAIU,SAAS,CAAE,cAAaC,MAAM,CAACF,UAAU,IAAET,IAAI,CAAE,eAAc,OAAOK,CAAE,IAAGM,MAAM,CAACN,CAAC,CAAE,EAAC,CAAC;AACnG;AAEA,SAASF,gBAAgB,CAACS,GAAO,EAACZ,IAAoB,EAACS,UAAkB,EAAM;EAC9E,IAAG,CAACI,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EACrB,MAAM,IAAIF,SAAS,CAAE,mCAAkC,OAAOE,GAAI,IAAGD,MAAM,CAACC,GAAG,CAAE,EAAC,CAAC;EAEpF,MAAMG,CAAC,GAACH,GAAG,CAACI,SAAS,CAACX,CAAC,IAAED,SAAS,CAACC,CAAC,EAACL,IAAI,CAAC,IAAE,KAAK,CAAC;EAClD,IAAGe,CAAC,GAAC,CAAC,CAAC,EACN,MAAM,IAAIL,SAAS,CAAE,YAAWC,MAAM,CAACF,UAAU,IAAET,IAAI,CAAE,iBAAgBe,CAAE,UAAS,OAAOH,GAAG,CAACG,CAAC,CAAE,IAAGJ,MAAM,CAACC,GAAG,CAACG,CAAC,CAAC,CAAE,EAAC,CAAC;AAExH"},"metadata":{},"sourceType":"module","externalDependencies":[]}