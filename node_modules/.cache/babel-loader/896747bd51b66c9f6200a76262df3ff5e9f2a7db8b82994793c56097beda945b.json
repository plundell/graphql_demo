{"ast":null,"code":"var _jsxFileName = \"/home/buck/Documents/software/formulate_graphql/src/components/country-search.d/country-results.component.tsx\";\nimport React from 'react';\nimport { TileGrid } from 'components/tiles.d/tile-grid.component';\nimport { graphql } from 'services/countries-api/countries-api.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst settings = {\n  markClass: 'marked'\n};\nfunction randomDelay(resolveWith) {\n  return new Promise(resolve => {\n    const delay = Math.random() * (3000 - 1000) + 1000;\n    setTimeout(() => {\n      // console.log('resolving with',resolveWith)\n      resolve(resolveWith);\n    }, delay);\n  });\n}\nexport default class CountryResults extends React.Component {\n  log() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    console.log(this._ID, `<${this.constructor.name}>`, ...args);\n  }\n  constructor(props) {\n    var _this$props$results;\n    super(props);\n    this._ID = void 0;\n    this.cache = {};\n    this.buildTile = ent => {\n      const tile = {\n        title: ent.value,\n        classNames: [ent.type.toLowerCase()]\n      };\n      const cls = settings.markClass;\n      tile.onClick = function toggleSelected() {\n        const i = tile.classNames.indexOf(cls);\n        if (i > -1) {\n          tile.classNames.splice(i, 1);\n          this === null || this === void 0 ? void 0 : this.elem.classList.remove(cls);\n        } else {\n          tile.classNames.push(settings.markClass);\n          this === null || this === void 0 ? void 0 : this.elem.classList.add(cls);\n        }\n      };\n      const promise = CountryResults[`build${ent.type}TileContent`](ent);\n      tile.content = promise;\n      promise.then(content => {\n        tile.content = content;\n      });\n      return tile;\n    };\n    this.getTiles = () => {\n      if (this.props.results) {\n        const tiles = {};\n        var i = 0;\n        for (const ent of this.props.results) {\n          tiles[ent.key] = this.getTile(ent);\n        }\n        return tiles;\n      } else {\n        return null;\n      }\n    };\n    this._ID = Math.floor(Math.random() * 10000);\n    this.log(\"creating\", (_this$props$results = this.props.results) === null || _this$props$results === void 0 ? void 0 : _this$props$results.map(ent => ent.value).join(', '));\n    if (props.register) props.register(this);\n  }\n  get selected() {\n    return Object.entries(this.cache).filter(_ref => {\n      var _tile$classNames;\n      let [key, tile] = _ref;\n      return (_tile$classNames = tile.classNames) === null || _tile$classNames === void 0 ? void 0 : _tile$classNames.includes(settings.markClass);\n    }).map(_ref2 => {\n      let [key] = _ref2;\n      return key;\n    });\n  }\n  clearSelected() {\n    const keys = this.selected;\n    if (keys.length) {\n      for (const key of keys) {\n        var _this$cache$key$onCli;\n        (_this$cache$key$onCli = this.cache[key].onClick) === null || _this$cache$key$onCli === void 0 ? void 0 : _this$cache$key$onCli.call(null);\n      }\n      this.forceUpdate();\n    }\n  }\n  getTile(ent) {\n    if (this.cache.hasOwnProperty(ent.key) == false) {\n      this.cache[ent.key] = this.buildTile(ent);\n    }\n    return this.cache[ent.key];\n  }\n  static getNestedString(value) {\n    if (typeof value == 'object') {\n      if (Array.isArray(value)) return value.map(v => v.name).join(', ');else return value.name;\n    } else if (typeof value != 'string') {\n      console.error(\"Unexpected value returned from GraphQL query:\", value);\n      return 'no data';\n    }\n    return value;\n  }\n  static keyValueToHtml(prop, value) {\n    const Prop = prop[0].toUpperCase() + prop.slice(1) + ': ';\n    value = this.getNestedString(value);\n    if (value.length > 100) {\n      const i = value.slice(100).indexOf(',') + 99;\n      value = /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"hideOverflow\",\n          children: value.slice(0, i)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"overflow\",\n          children: value.slice(i)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"fieldName\",\n        children: Prop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"fieldValue\",\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }, this);\n  }\n  static queryDataToTileContent(data) {\n    const html = [];\n    if (data) {\n      /* eslint-disable-next-line prefer-const */\n      for (let [prop, value] of Object.entries(data)) {\n        /**/\n        if (value) html.push(CountryResults.keyValueToHtml(prop, value));\n      }\n    } else {\n      html.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"no data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 14\n      }, this));\n    }\n    return html;\n  }\n  static async buildCountryTileContent(ent) {\n    return graphql.getCountryDetails(ent).then(_ref3 => {\n      let {\n        country\n      } = _ref3;\n      return CountryResults.queryDataToTileContent(country);\n    });\n  }\n  static async buildContinentTileContent(ent) {\n    return graphql.getContinentMembers(ent).then(_ref4 => {\n      let {\n        continent\n      } = _ref4;\n      return CountryResults.queryDataToTileContent(continent);\n    });\n  }\n  static async buildLanguageTileContent(ent) {\n    return graphql.getLanguageDetails({\n      code: ent.code.toLowerCase()\n    }).then(_ref5 => {\n      let {\n        language\n      } = _ref5;\n      return CountryResults.queryDataToTileContent(language);\n    });\n  }\n  render() {\n    const tiles = this.getTiles();\n    if (tiles) {\n      if (Object.keys(tiles).length) this.log(\"rendering:\", Object.values(tiles).map(t => `${t.title}${t.content instanceof Promise ? '*' : ''}`).join(', '));else this.log(\"no results:\", this);\n    } else {\n      this.log(\"not started yet\");\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: this.constructor.name,\n      children: /*#__PURE__*/_jsxDEV(TileGrid, {\n        tiles: tiles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 4\n    }, this);\n  }\n}","map":{"version":3,"names":["React","TileGrid","graphql","settings","markClass","randomDelay","resolveWith","Promise","resolve","delay","Math","random","setTimeout","CountryResults","Component","log","args","console","_ID","constructor","name","props","cache","buildTile","ent","tile","title","value","classNames","type","toLowerCase","cls","onClick","toggleSelected","i","indexOf","splice","elem","classList","remove","push","add","promise","content","then","getTiles","results","tiles","key","getTile","floor","map","join","register","selected","Object","entries","filter","includes","clearSelected","keys","length","call","forceUpdate","hasOwnProperty","getNestedString","Array","isArray","v","error","keyValueToHtml","prop","Prop","toUpperCase","slice","queryDataToTileContent","data","html","buildCountryTileContent","getCountryDetails","country","buildContinentTileContent","getContinentMembers","continent","buildLanguageTileContent","getLanguageDetails","code","language","render","values","t"],"sources":["/home/buck/Documents/software/formulate_graphql/src/components/country-search.d/country-results.component.tsx"],"sourcesContent":["import React from 'react'\nimport {TileGrid, Props as GridProps,Tile} from 'components/tiles.d/tile-grid.component'\nimport {Entity, NullableEntityArray} from './country-search.component'\nimport {graphql} from 'services/countries-api/countries-api.service';\nimport { Renderable } from 'components/tiles.d/tile.component';\n\ninterface Props {\n\tresults:NullableEntityArray\n\tregister?:(self:CountryResults)=>void\n}\n\ntype TileProps=NonNullable<GridProps['tiles']>[keyof GridProps['tiles']] ;\ntype TileRecords=NonNullable<GridProps['tiles']>\n\t\nconst settings={\n\tmarkClass:'marked'\n}\n\nfunction randomDelay<T>(resolveWith:T):Promise<T>{\n\treturn new Promise(resolve=>{\n\t\tconst delay=Math.random() * (3000 - 1000) + 1000;\n\t\tsetTimeout(()=>{\n\t\t\t// console.log('resolving with',resolveWith)\n\t\t\tresolve(resolveWith);\n\t\t},delay);\n\t})\n}\n\nexport default class CountryResults extends React.Component<Props> {\n\tprivate _ID:number;\n\tlog(...args:any[]){\n\t\tconsole.log(this._ID,`<${this.constructor.name}>`,...args);\n\t}\n\n\tprivate cache:TileRecords={};\n\t\n\tconstructor(props:Props){\n\t\tsuper(props);\n\t\tthis._ID=Math.floor(Math.random()*10000);\n\t\tthis.log(\"creating\",this.props.results?.map(ent=>ent.value).join(', '));\n\t\tif(props.register)\n\t\t\tprops.register(this);\n\t}\n\n\tget selected(){\n\t\treturn Object.entries(this.cache)\n\t\t\t.filter(([key,tile])=>tile.classNames?.includes(settings.markClass))\n\t\t\t.map(([key])=>key)\n\t}\n\n\tclearSelected(){\n\t\tconst keys=this.selected;\n\t\tif(keys.length){\n\t\t\tfor(const key of keys){\n\t\t\t\tthis.cache[key].onClick?.call(null)\n\t\t\t}\n\t\t\tthis.forceUpdate();\n\t\t}\n\t}\n\n\tprivate getTile(ent:Entity):TileProps{\n\t\tif(this.cache.hasOwnProperty(ent.key)==false){\n\t\t\tthis.cache[ent.key]=this.buildTile(ent);\n\t\t}\n\t\treturn this.cache[ent.key];\n\t}\n\n\tprivate buildTile=(ent:Entity):TileProps=>{\n\t\tconst tile:any={\n\t\t\ttitle:ent.value\n\t\t\t,classNames:[ent.type.toLowerCase()]\n\t\t};\n\t\tconst cls=settings.markClass;\n\t\ttile.onClick=function toggleSelected(this:Tile|null){\n\t\t\tconst i=tile.classNames.indexOf(cls)\n\t\t\tif(i>-1){\n\t\t\t\ttile.classNames.splice(i,1)\n\t\t\t\tthis?.elem.classList.remove(cls)\n\t\t\t}else{\n\t\t\t\ttile.classNames.push(settings.markClass);\n\t\t\t\tthis?.elem.classList.add(cls);\n\t\t\t}\n\t\t}\n\t\tconst promise=CountryResults[`build${ent.type}TileContent`](ent);\n\t\ttile.content=promise;\n\t\tpromise.then(content=>{tile.content=content})\n\t\n\t\treturn tile;\n\t}\n\t\n\tprivate static getNestedString(value:any):string{\n\t\tif(typeof value=='object'){\n\t\t\tif(Array.isArray(value)) \n\t\t\t\treturn value.map(v=>v.name).join(', ');\n\t\t\telse\n\t\t\t\treturn value.name\n\t\t}else if(typeof value!='string'){\n\t\t\tconsole.error(\"Unexpected value returned from GraphQL query:\",value);\n\t\t\treturn 'no data';\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate static keyValueToHtml(prop:string,value:any){\n\t\tconst Prop=prop[0].toUpperCase()+prop.slice(1)+': '\n\t\tvalue=this.getNestedString(value);\n\t\tif(value.length>100){\n\t\t\tconst i=value.slice(100).indexOf(',')+99;\n\t\t\tvalue=(\n\t\t\t\t<span>\n\t\t\t\t\t<span className=\"hideOverflow\">{value.slice(0,i)}</span>\n\t\t\t\t\t<span className='overflow'>{value.slice(i)}</span>\n\t\t\t\t</span>\n\t\t\t)\n\t\t}\n\n\t\treturn (<div>\n\t\t\t<span className='fieldName'>{Prop}</span>\n\t\t\t<span className='fieldValue'>{value}</span>\n\t\t</div>);\n\t}\n\tprivate static queryDataToTileContent(data:{[key:string]:any}|null|undefined){\n\t\tconst html:JSX.Element[]=[];\n\t\tif(data){\n\t\t\t /* eslint-disable-next-line prefer-const */\n\t\t\tfor(let [prop,value] of Object.entries(data)){ /**/\n\t\t\t\tif(value) html.push(CountryResults.keyValueToHtml(prop,value))\n\t\t\t}\n\t\t}else{\n\t\t\thtml.push(<div>no data</div>)\n\t\t}\n\t\treturn html\n\t}\n\n\tprivate static async buildCountryTileContent(ent:Entity):Promise<Renderable>{\n\t\treturn graphql.getCountryDetails(ent)\n\t\t\t.then(({country})=>CountryResults.queryDataToTileContent(country));\n\t}\n\tprivate static async buildContinentTileContent(ent:Entity):Promise<Renderable>{\n\t\treturn graphql.getContinentMembers(ent)\n\t\t\t.then(({continent})=>CountryResults.queryDataToTileContent(continent));\n\t}\n\tprivate static async buildLanguageTileContent(ent:Entity):Promise<Renderable>{\n\t\treturn graphql.getLanguageDetails({code:ent.code.toLowerCase()})\n\t\t\t.then(({language})=>CountryResults.queryDataToTileContent(language));\n\t}\n\n\tprivate getTiles=():GridProps['tiles']=>{\n\t\tif(this.props.results){\n\t\t\tconst tiles:TileRecords={};\n\t\t\tvar i=0;\n\t\t    for(const ent of this.props.results){\n\t\t    \ttiles[ent.key]=this.getTile(ent);\n\t\t\t}\n\t\t\treturn tiles;\n\t\t}else{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\trender(){\n\t\tconst tiles=this.getTiles();\n\t\tif(tiles){\n\t\t\tif(Object.keys(tiles).length)\n\t\t\t\tthis.log(\"rendering:\",Object.values(tiles).map(t=>(`${t.title}${t.content instanceof Promise ?'*':''}`)).join(', '));\n\t\t\telse \n\t\t\t\tthis.log(\"no results:\",this)\n\t\t}else{\n\t\t\tthis.log(\"not started yet\")\n\t\t}\n\t\treturn (\n\t\t\t<div className={this.constructor.name}>\n\t\t\t\t<TileGrid tiles={tiles}/>\n\t\t\t</div>\n\t\t)\n\t}\n\n\n\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}