{"ast":null,"code":"import _classPrivateFieldLooseBase from \"/home/buck/Documents/software/formulate_graphql/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"/home/buck/Documents/software/formulate_graphql/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nvar _jsxFileName = \"/home/buck/Documents/software/formulate_graphql/src/components/country-search.d/country-search.component.tsx\";\nimport React from 'react';\nimport { CompletionInput } from 'components/completion-input.d/completion-input.component';\nimport CountryResults from './country-results.component';\nimport \"./country-search.css\";\nimport { graphql, toEntityType } from 'services/countries-api/countries-api.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst settings = {\n  debounce: 300,\n  inputId: \"country-search\"\n};\nvar _setJSXOnMatch = /*#__PURE__*/_classPrivateFieldLooseKey(\"setJSXOnMatch\");\nexport class CountrySearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.entities = null;\n    Object.defineProperty(this, _setJSXOnMatch, {\n      writable: true,\n      value: (ent, prop, regex) => {\n        const match = ent[prop].match(regex);\n        if (match) {\n          const htmlArr = [];\n          match[1] && htmlArr.push( /*#__PURE__*/_jsxDEV(\"span\", {\n            children: match[1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 30\n          }, this));\n          htmlArr.push( /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"highlight\",\n            children: match[2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 18\n          }, this));\n          match[3] && htmlArr.push( /*#__PURE__*/_jsxDEV(\"span\", {\n            children: match[3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 30\n          }, this));\n          htmlArr.push( /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"type\",\n            children: ent.type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 18\n          }, this));\n          if (prop == 'code') htmlArr.push( /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" - \", ent.value]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 18\n          }, this));\n          ent.html = htmlArr;\n          return true;\n        }\n        return false;\n      }\n    });\n    this.state = {\n      results: null\n    };\n    graphql.getNamesAndCodes({}).then(data => {\n      const list = [];\n      Object.entries(data).forEach(_ref => {\n        let [t, arr] = _ref;\n        if (Array.isArray(arr)) {\n          const type = toEntityType(t);\n          arr.forEach(_ref2 => {\n            let {\n              code,\n              name\n            } = _ref2;\n            code = code.toUpperCase();\n            const value = String(name || code);\n            const key = `${code}-${type}`.toLowerCase();\n            list.push({\n              key,\n              value,\n              code,\n              type\n            });\n          });\n        }\n      });\n      if (list.length) this.entities = list;\n    });\n  }\n  getCompletions(search, entities) {\n    if (!entities) entities = this.entities; //if no subset of entities are passed in then use the entire list\n    else if (!entities.length) {\n      return [];\n    }\n    // console.log(\"Check for completions to '\"+search+\"' in:\",entities)\n\n    if (!entities || !entities.length) return null;\n    const regex = new RegExp((search.length < 3 ? '(^)(' : '(.*)(') + search + ')(.*)', 'i'); //short strings we only match begining\n    var results;\n    if (search.length < 3) results = entities.filter(ent => _classPrivateFieldLooseBase(this, _setJSXOnMatch)[_setJSXOnMatch](ent, 'value', regex) || _classPrivateFieldLooseBase(this, _setJSXOnMatch)[_setJSXOnMatch](ent, 'code', regex));else results = entities.filter(ent => _classPrivateFieldLooseBase(this, _setJSXOnMatch)[_setJSXOnMatch](ent, 'value', regex));\n    this.setState({\n      results\n    });\n    return results;\n  }\n  render() {\n    var _this$state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CompletionInput, {\n        id: settings.inputId,\n        debounce: settings.debounce,\n        onInput: this.getCompletions.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(CountryResults, {\n        results: ((_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.results) || null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 4\n    }, this);\n  }\n}\nexport default CountrySearch;","map":{"version":3,"names":["React","CompletionInput","CountryResults","graphql","toEntityType","settings","debounce","inputId","CountrySearch","Component","constructor","props","entities","ent","prop","regex","match","htmlArr","push","type","value","html","state","results","getNamesAndCodes","then","data","list","Object","entries","forEach","t","arr","Array","isArray","code","name","toUpperCase","String","key","toLowerCase","length","getCompletions","search","RegExp","filter","setState","render","bind"],"sources":["/home/buck/Documents/software/formulate_graphql/src/components/country-search.d/country-search.component.tsx"],"sourcesContent":["import React from 'react'\nimport {CompletionInput,OnSubmitHandler} from 'components/completion-input.d/completion-input.component'\nimport CountryResults from './country-results.component';\nimport \"./country-search.css\";\nimport {graphql,EntityType,toEntityType,Scalars} from 'services/countries-api/countries-api.service';\n\nexport interface Entity{\n\tvalue:Scalars['String']\n\t,code:Scalars['ID']\n\t,type:EntityType\n\t,key:Scalars['String']\n\t,html?:JSX.Element|JSX.Element[]\n}\n\nexport type NullableEntityArray=Entity[]|null;\n\nconst settings={\n\tdebounce:300\n\t,inputId:\"country-search\"\n}\n\nexport interface Props {\n}\ninterface State{\n\tresults:NullableEntityArray\n}\n\nexport class CountrySearch extends React.Component<Props,State> {\n\n\tprivate entities:NullableEntityArray=null;\n\n\tconstructor(props:Props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tresults:null\n\t\t};\n\t\tgraphql.getNamesAndCodes({})\n\t\t\t.then(data=>{\n\t\t\t\tconst list:typeof this.entities=[];\n\t\t\t\tObject.entries(data).forEach(([t,arr])=>{\n\t\t\t\t\tif(Array.isArray(arr)){\n\t\t\t\t\t\tconst type=toEntityType(t)\n\t\t\t\t\t\tarr.forEach(({code,name})=>{\n\t\t\t\t\t\t\tcode=code.toUpperCase()\n\t\t\t\t\t\t\tconst value=String(name||code);\n\t\t\t\t\t\t\tconst key:Entity[\"key\"]=`${code}-${type}`.toLowerCase();\n\t\t\t\t\t\t\tlist.push({key, value, code, type});\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tif(list.length)\n\t\t\t\t\tthis.entities=list\n\t\t\t})\n\t}\n\n\tgetCompletions(search:string,entities:NullableEntityArray):NullableEntityArray {\n\t\tif(!entities)\n\t\t\tentities=this.entities; //if no subset of entities are passed in then use the entire list\n\t\telse if(!entities.length){\n\t\t\treturn [];\n\t\t}\n\t\t// console.log(\"Check for completions to '\"+search+\"' in:\",entities)\n\t\t\n\t\tif(!entities || !entities.length)\n\t\t\treturn null;\n\n\t\tconst regex=new RegExp((search.length<3 ? '(^)(' : '(.*)(')+search+')(.*)','i'); //short strings we only match begining\n\t\tvar results;\n\t\tif(search.length<3)\n\t\t\tresults=entities.filter(ent=>this.#setJSXOnMatch(ent,'value',regex)||this.#setJSXOnMatch(ent,'code',regex));\n\t\telse\n\t\t\tresults=entities.filter(ent=>this.#setJSXOnMatch(ent,'value',regex));\n\t\tthis.setState({results})\n\t\treturn results;\n\t}\n\n\t#setJSXOnMatch=(ent:Entity,prop:\"value\"|\"code\",regex:RegExp):boolean=>{\n\t\tconst match=ent[prop].match(regex);\n\t\tif(match){\n\t\t\tconst htmlArr:JSX.Element[]=[];\n\t\t\tmatch[1] && htmlArr.push((<span>{match[1]}</span>))\n\t\t\thtmlArr.push((<span className=\"highlight\">{match[2]}</span>))\n\t\t\tmatch[3] && htmlArr.push((<span>{match[3]}</span>))\n\t\t\thtmlArr.push((<span className=\"type\">{ent.type}</span>))\n\t\t\tif(prop=='code')\n\t\t\t\thtmlArr.push(<span> - {ent.value}</span>)\n\t\t\tent.html=htmlArr\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<CompletionInput \n\t\t\t\t\tid={settings.inputId} \n\t\t\t\t\tdebounce={settings.debounce} \n\t\t\t\t\tonInput={this.getCompletions.bind(this)}\n\t\t\t\t/>\n\t\t\t\t<CountryResults \n\t\t\t\t\tresults={this.state?.results||null}\n\n\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default CountrySearch"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}