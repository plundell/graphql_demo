{"ast":null,"code":"import { GraphQLClient } from 'graphql-request';\n\n// The ./types.ts file is generated by the module graphql-codegen (which has to be run manually) \n// from all .graphql files in this project. We export it so others don't have to import 2 things\nexport * from './types';\nexport const uri = \"https://countries.trevorblades.com\";\nexport const graphql = new GraphQLClient(uri, {\n  headers: {}\n});\nexport let EntityType;\n(function (EntityType) {\n  EntityType[EntityType[\"Country\"] = 0] = \"Country\";\n  EntityType[EntityType[\"Continent\"] = 1] = \"Continent\";\n  EntityType[EntityType[\"Language\"] = 2] = \"Language\";\n})(EntityType || (EntityType = {}));","map":{"version":3,"names":["GraphQLClient","uri","graphql","headers","EntityType"],"sources":["/home/buck/Documents/software/formulate_graphql/src/services/countries-api/countries-api.service.ts"],"sourcesContent":["import { GraphQLClient } from 'graphql-request'\n\n// The ./types.ts file is generated by the module graphql-codegen (which has to be run manually) \n// from all .graphql files in this project. We export it so others don't have to import 2 things\nexport * from './types'\n\nexport const uri:string = \"https://countries.trevorblades.com\";\n\nexport const graphql = new GraphQLClient(uri, { headers: {} });\n\nexport enum EntityType {\n\t'Country'\n\t,'Continent'\n\t,'Language'\n}\n\n\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,iBAAiB;;AAE/C;AACA;AACA,cAAc,SAAS;AAEvB,OAAO,MAAMC,GAAU,GAAG,oCAAoC;AAE9D,OAAO,MAAMC,OAAO,GAAG,IAAIF,aAAa,CAACC,GAAG,EAAE;EAAEE,OAAO,EAAE,CAAC;AAAE,CAAC,CAAC;AAE9D,WAAYC,UAAU;AAIrB,WAJWA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;AAAA,GAAVA,UAAU,KAAVA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}