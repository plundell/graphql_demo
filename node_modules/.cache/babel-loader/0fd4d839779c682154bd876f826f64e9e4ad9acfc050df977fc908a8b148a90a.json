{"ast":null,"code":"import { graphql, assertEntityType, NamesAndCodesDocument } from 'services/countries-api/countries-api.service';\nexport class Entity {\n  constructor(name, code, type) {\n    this.name = name;\n    this.code = code;\n    this.type = type;\n  }\n}\nfunction makeEntityArray(data) {\n  const list = [];\n  Object.entries(data).forEach(_ref => {\n    let [type, arr] = _ref;\n    if (Array.isArray(arr)) {\n      arr.forEach(_ref2 => {\n        let {\n          code,\n          name\n        } = _ref2;\n        list.push(new Entity(code, String(name), assertEntityType(type)));\n      });\n    }\n  });\n  return list;\n}\nexport function getNamesAndCodes() {\n  return graphql.request(NamesAndCodesDocument).then(makeEntityArray);\n}\nexport default getNamesAndCodes;","map":{"version":3,"names":["graphql","assertEntityType","NamesAndCodesDocument","Entity","constructor","name","code","type","makeEntityArray","data","list","Object","entries","forEach","arr","Array","isArray","push","String","getNamesAndCodes","request","then"],"sources":["/home/buck/Documents/software/formulate_graphql/src/components/country-input.d/names-and-codes.query.ts"],"sourcesContent":["import {\n  graphql,\n  EntityType,\n  assertEntityType,\n  Scalars,\n  NamesAndCodesQuery,\n  NamesAndCodesQueryVariables,\n  NamesAndCodesDocument\n} from 'services/countries-api/countries-api.service';\n\n\nexport class Entity{\n  constructor(\n    public name:Scalars['String']\n    ,public code:Scalars['ID']\n    ,public type:EntityType\n  ){}\n}\n\n\n\nexport type EntityArray=Array<Entity>;\n\nfunction makeEntityArray(data:NamesAndCodesQuery):EntityArray{\n  const list:ReturnType<typeof makeEntityArray>=[];\n  Object.entries(data).forEach(([type,arr])=>{\n    if(Array.isArray(arr)){\n      arr.forEach(({code,name})=>{\n        list.push(new Entity(code, String(name), assertEntityType(type)));\n      })\n    }\n  })\n  return list\n}\n\nexport function getNamesAndCodes(){\n  return graphql.request<NamesAndCodesQuery,NamesAndCodesQueryVariables>(NamesAndCodesDocument).then(makeEntityArray)\n}\n\nexport default getNamesAndCodes\n\n\n\n"],"mappings":"AAAA,SACEA,OAAO,EAEPC,gBAAgB,EAIhBC,qBAAqB,QAChB,8CAA8C;AAGrD,OAAO,MAAMC,MAAM;EACjBC,WAAW,CACFC,IAAsB,EACrBC,IAAkB,EAClBC,IAAe,EACxB;IAAA,KAHQF,IAAsB,GAAtBA,IAAsB;IAAA,KACrBC,IAAkB,GAAlBA,IAAkB;IAAA,KAClBC,IAAe,GAAfA,IAAe;EACvB;AACJ;AAMA,SAASC,eAAe,CAACC,IAAuB,EAAa;EAC3D,MAAMC,IAAuC,GAAC,EAAE;EAChDC,MAAM,CAACC,OAAO,CAACH,IAAI,CAAC,CAACI,OAAO,CAAC,QAAc;IAAA,IAAb,CAACN,IAAI,EAACO,GAAG,CAAC;IACtC,IAAGC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EAAC;MACpBA,GAAG,CAACD,OAAO,CAAC,SAAe;QAAA,IAAd;UAACP,IAAI;UAACD;QAAI,CAAC;QACtBK,IAAI,CAACO,IAAI,CAAC,IAAId,MAAM,CAACG,IAAI,EAAEY,MAAM,CAACb,IAAI,CAAC,EAAEJ,gBAAgB,CAACM,IAAI,CAAC,CAAC,CAAC;MACnE,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EACF,OAAOG,IAAI;AACb;AAEA,OAAO,SAASS,gBAAgB,GAAE;EAChC,OAAOnB,OAAO,CAACoB,OAAO,CAAiDlB,qBAAqB,CAAC,CAACmB,IAAI,CAACb,eAAe,CAAC;AACrH;AAEA,eAAeW,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}