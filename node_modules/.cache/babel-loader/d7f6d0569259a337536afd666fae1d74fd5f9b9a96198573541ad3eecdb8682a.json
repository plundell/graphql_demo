{"ast":null,"code":"var _jsxFileName = \"/home/buck/Documents/software/formulate_graphql/src/components/tiles.d/tile-grid.component.tsx\";\nimport React from 'react';\nimport { Tile } from './tile.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// export class TileGrid<T extends Props> extends React.Component<T,State<T>> {\nexport class TileGrid extends React.Component {\n  // state:Record<Extract<keyof Props[\"tiles\"],string>,Content>\n  //To allow all the content of each tile to change after it's been created\n  //we'll store that stuff in state. keys will be the keys from Props[tiles]\n  //but since we want additional \n\n  constructor(props) {\n    super(props);\n    this.state = void 0;\n    this._ID = Math.floor(Math.random() * 10000);\n    const state = {};\n    for (const key in this.props.tiles) {\n      const tile = this.props.tiles[key];\n      if (tile.content instanceof Promise) {\n        tile.content.then(c => {\n          this.updateTileContent(key, c);\n        });\n        state[key] = props.whileLoading || /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 37\n        }, void 0);\n      } else {\n        state[key] = tile.content;\n      }\n    }\n    console.log(this._ID, \"creating new <TileGrid>:\", Object.values(this.props.tiles).map(t => t.title).join(', '));\n    this.state = state;\n  }\n  updateTileContent(key, content) {\n    if (this.state.hasOwnProperty(key)) {\n      this.setState(Object.fromEntries([[key, content]]));\n    }\n  }\n  render() {\n    // console.log(this.props.tiles, this.state);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tileGrid\",\n      children: Object.entries(this.props.tiles).map(_ref => {\n        let [key, tile] = _ref;\n        return /*#__PURE__*/_jsxDEV(Tile, {\n          title: (tile === null || tile === void 0 ? void 0 : tile.title) || key,\n          className: tile === null || tile === void 0 ? void 0 : tile.className,\n          content: this.state[key]\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 6\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }, this);\n  }\n}\nexport default TileGrid;","map":{"version":3,"names":["React","Tile","TileGrid","Component","constructor","props","state","_ID","Math","floor","random","key","tiles","tile","content","Promise","then","c","updateTileContent","whileLoading","console","log","Object","values","map","t","title","join","hasOwnProperty","setState","fromEntries","render","entries","className"],"sources":["/home/buck/Documents/software/formulate_graphql/src/components/tiles.d/tile-grid.component.tsx"],"sourcesContent":["import React from 'react'\nimport {Tile, Props as TileProps} from './tile.component'\n\n\ntype Content=TileProps[\"content\"];\n\n//we want to allow any async content to be replaced when the data is available, so\n//we expand the type, then in the constructor we \ntype AsyncTileProps=Omit<TileProps,'content'> & {content:Content|Promise<Content>}\ntype AsyncTiles=Record<string,AsyncTileProps>\n\nexport type Props={\n\ttiles:AsyncTiles\n\twhileLoading?:Content\n}\n\n// export class TileGrid<T extends Props> extends React.Component<T,State<T>> {\nexport class TileGrid extends React.Component<Props> {\n\t\n\t// state:Record<Extract<keyof Props[\"tiles\"],string>,Content>\n\t//To allow all the content of each tile to change after it's been created\n\t//we'll store that stuff in state. keys will be the keys from Props[tiles]\n\t//but since we want additional \n\tstate:Record<string,Content>\n\n\tprivate _ID:number=Math.floor(Math.random()*10000)\n\n\tconstructor(props:Props){\n\t\tsuper(props);\n\t\tconst state:any={};\n\t\tfor(const key in this.props.tiles){\n\t\t\tconst tile=this.props.tiles[key]\n\t\t\tif(tile.content instanceof Promise){\n\t\t\t\ttile.content.then(c=>{this.updateTileContent(key,c)});\n\t\t\t\tstate[key]=props.whileLoading||(<span className='loading'></span>)\n\t\t\t}else{\n\t\t\t\tstate[key]=tile.content;\n\t\t\t}\n\t\t}\n\t\tconsole.log(this._ID,\"creating new <TileGrid>:\",Object.values(this.props.tiles).map(t=>t.title).join(', '));\n\t\tthis.state=state\n\t}\n\n\tupdateTileContent(key:string,content:Content){\n\t\tif(this.state.hasOwnProperty(key)){\n\t\t\tthis.setState(Object.fromEntries([[key,content]]));\n\t\t}\n\t}\n\n  \trender() {\n  \t\t// console.log(this.props.tiles, this.state);\n  \t\treturn (\n\t\t\t<div className=\"tileGrid\">{\n\t\t\t\tObject.entries(this.props.tiles).map(([key,tile])=>\n\t\t\t\t\t<Tile key={key} title={tile?.title||key} className={tile?.className} content={this.state[key]} />\n\t\t\t\t)\n\t\t\t}</div>  \n  \t\t)\n  \t}\n\n}\n\nexport default TileGrid\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,IAAI,QAA2B,kBAAkB;AAAA;AAezD;AACA,OAAO,MAAMC,QAAQ,SAASF,KAAK,CAACG,SAAS,CAAQ;EAEpD;EACA;EACA;EACA;;EAKAC,WAAW,CAACC,KAAW,EAAC;IACvB,KAAK,CAACA,KAAK,CAAC;IAAC,KALdC,KAAK;IAAA,KAEGC,GAAG,GAAQC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAC,KAAK,CAAC;IAIjD,MAAMJ,KAAS,GAAC,CAAC,CAAC;IAClB,KAAI,MAAMK,GAAG,IAAI,IAAI,CAACN,KAAK,CAACO,KAAK,EAAC;MACjC,MAAMC,IAAI,GAAC,IAAI,CAACR,KAAK,CAACO,KAAK,CAACD,GAAG,CAAC;MAChC,IAAGE,IAAI,CAACC,OAAO,YAAYC,OAAO,EAAC;QAClCF,IAAI,CAACC,OAAO,CAACE,IAAI,CAACC,CAAC,IAAE;UAAC,IAAI,CAACC,iBAAiB,CAACP,GAAG,EAACM,CAAC,CAAC;QAAA,CAAC,CAAC;QACrDX,KAAK,CAACK,GAAG,CAAC,GAACN,KAAK,CAACc,YAAY,iBAAG;UAAM,SAAS,EAAC;QAAS;UAAA;UAAA;UAAA;QAAA,UAAS;MACnE,CAAC,MAAI;QACJb,KAAK,CAACK,GAAG,CAAC,GAACE,IAAI,CAACC,OAAO;MACxB;IACD;IACAM,OAAO,CAACC,GAAG,CAAC,IAAI,CAACd,GAAG,EAAC,0BAA0B,EAACe,MAAM,CAACC,MAAM,CAAC,IAAI,CAAClB,KAAK,CAACO,KAAK,CAAC,CAACY,GAAG,CAACC,CAAC,IAAEA,CAAC,CAACC,KAAK,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3G,IAAI,CAACrB,KAAK,GAACA,KAAK;EACjB;EAEAY,iBAAiB,CAACP,GAAU,EAACG,OAAe,EAAC;IAC5C,IAAG,IAAI,CAACR,KAAK,CAACsB,cAAc,CAACjB,GAAG,CAAC,EAAC;MACjC,IAAI,CAACkB,QAAQ,CAACP,MAAM,CAACQ,WAAW,CAAC,CAAC,CAACnB,GAAG,EAACG,OAAO,CAAC,CAAC,CAAC,CAAC;IACnD;EACD;EAEEiB,MAAM,GAAG;IACR;IACA,oBACD;MAAK,SAAS,EAAC,UAAU;MAAA,UACxBT,MAAM,CAACU,OAAO,CAAC,IAAI,CAAC3B,KAAK,CAACO,KAAK,CAAC,CAACY,GAAG,CAAC;QAAA,IAAC,CAACb,GAAG,EAACE,IAAI,CAAC;QAAA,oBAC/C,QAAC,IAAI;UAAW,KAAK,EAAE,CAAAA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEa,KAAK,KAAEf,GAAI;UAAC,SAAS,EAAEE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEoB,SAAU;UAAC,OAAO,EAAE,IAAI,CAAC3B,KAAK,CAACK,GAAG;QAAE,GAAnFA,GAAG;UAAA;UAAA;UAAA;QAAA,QAAmF;MAAA;IACjG;MAAA;MAAA;MAAA;IAAA,QACK;EAEP;AAEH;AAEA,eAAeT,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}