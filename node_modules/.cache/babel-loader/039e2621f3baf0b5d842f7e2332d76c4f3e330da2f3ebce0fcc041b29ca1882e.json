{"ast":null,"code":"import _classPrivateFieldLooseBase from \"/home/buck/Documents/software/formulate_graphql/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"/home/buck/Documents/software/formulate_graphql/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nvar _jsxFileName = \"/home/buck/Documents/software/formulate_graphql/src/components/country-input.d/country-input.component.tsx\";\nimport React from 'react';\nimport { CompletionInput } from 'components/completion-input.d/completion-input.component';\nimport { getNamesAndCodes } from './names-and-codes.query';\nimport \"./country-input.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst settings = {\n  debounce: 300,\n  inputId: \"country-search\"\n};\nvar _setJSXOnMatch = /*#__PURE__*/_classPrivateFieldLooseKey(\"setJSXOnMatch\");\nexport default class CountryInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.entities = null;\n    Object.defineProperty(this, _setJSXOnMatch, {\n      writable: true,\n      value: (ent, prop, regex) => {\n        const match = ent[prop].match(regex);\n        if (match) {\n          const htmlArr = [];\n          match[1] && htmlArr.push( /*#__PURE__*/_jsxDEV(\"span\", {\n            children: match[1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 30\n          }, this));\n          htmlArr.push( /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"highlight\",\n            children: match[2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 18\n          }, this));\n          match[3] && htmlArr.push( /*#__PURE__*/_jsxDEV(\"span\", {\n            children: match[3]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 30\n          }, this));\n          htmlArr.push( /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"type\",\n            children: ent.type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 18\n          }, this));\n          if (prop == 'code') htmlArr.push( /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" - \", ent.value]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 18\n          }, this));\n          ent.html = htmlArr;\n          return true;\n        }\n        return false;\n      }\n    });\n    getNamesAndCodes().then(ent => {\n      if (ent.length) {\n        this.entities = ent;\n      }\n    });\n  }\n  getCompletions(search, entities) {\n    if (!entities) entities = this.entities; //if no subset of entities are passed in then use the entire list\n    else if (!entities.length) {\n      return [];\n    }\n    console.log(\"Check for completions to '\" + search + \"' in:\", entities);\n    if (!entities || !entities.length) return null;\n    const regex = new RegExp((search.length < 3 ? '(^)(' : '(.*)(') + search + ')(.*)', 'i'); //short strings we only match begining\n    if (search.length < 3) return entities.filter(ent => _classPrivateFieldLooseBase(this, _setJSXOnMatch)[_setJSXOnMatch](ent, 'value', regex) || _classPrivateFieldLooseBase(this, _setJSXOnMatch)[_setJSXOnMatch](ent, 'code', regex));else return entities.filter(ent => _classPrivateFieldLooseBase(this, _setJSXOnMatch)[_setJSXOnMatch](ent, 'value', regex));\n    //this^ can return an emtpy array, meaning no matches, meaning there is no point in typing more...\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(CompletionInput, {\n      id: settings.inputId,\n      debounce: settings.debounce,\n      onInput: this.getCompletions.bind(this),\n      onSubmit: this.props.onSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 4\n    }, this);\n  }\n}","map":{"version":3,"names":["React","CompletionInput","getNamesAndCodes","settings","debounce","inputId","CountryInput","Component","constructor","props","entities","ent","prop","regex","match","htmlArr","push","type","value","html","then","length","getCompletions","search","console","log","RegExp","filter","render","bind","onSubmit"],"sources":["/home/buck/Documents/software/formulate_graphql/src/components/country-input.d/country-input.component.tsx"],"sourcesContent":["import React from 'react'\nimport {CompletionInput,OnSubmitHandler} from 'components/completion-input.d/completion-input.component'\nimport {getNamesAndCodes,Entity} from './names-and-codes.query'\nimport \"./country-input.css\";\n\ntype NullableEntityArray=Entity[]|null;\n\nconst settings={\n\tdebounce:300\n\t,inputId:\"country-search\"\n}\n\nexport interface Props {\n\tonSubmit:OnSubmitHandler\n}\n\nexport default class CountryInput extends React.Component<Props> {\n\n\tprivate entities:NullableEntityArray=null;\n\n\tconstructor(props:never){\n\t\tsuper(props)\n\t\tgetNamesAndCodes().then(ent=>{if(ent.length){this.entities=ent}});\n\t}\n\n\tgetCompletions(search:string,entities:NullableEntityArray):NullableEntityArray {\n\t\tif(!entities)\n\t\t\tentities=this.entities; //if no subset of entities are passed in then use the entire list\n\t\telse if(!entities.length){\n\t\t\treturn [];\n\t\t}\n\t\tconsole.log(\"Check for completions to '\"+search+\"' in:\",entities)\n\t\t\n\t\tif(!entities || !entities.length)\n\t\t\treturn null;\n\n\t\tconst regex=new RegExp((search.length<3 ? '(^)(' : '(.*)(')+search+')(.*)','i'); //short strings we only match begining\n\t\tif(search.length<3)\n\t\t\treturn entities.filter(ent=>this.#setJSXOnMatch(ent,'value',regex)||this.#setJSXOnMatch(ent,'code',regex));\n\t\telse\n\t\t\treturn entities.filter(ent=>this.#setJSXOnMatch(ent,'value',regex));\n\t\t//this^ can return an emtpy array, meaning no matches, meaning there is no point in typing more...\n\t}\n\n\t#setJSXOnMatch=(ent:Entity,prop:\"value\"|\"code\",regex:RegExp):boolean=>{\n\t\tconst match=ent[prop].match(regex);\n\t\tif(match){\n\t\t\tconst htmlArr:JSX.Element[]=[];\n\t\t\tmatch[1] && htmlArr.push((<span>{match[1]}</span>))\n\t\t\thtmlArr.push((<span className=\"highlight\">{match[2]}</span>))\n\t\t\tmatch[3] && htmlArr.push((<span>{match[3]}</span>))\n\t\t\thtmlArr.push((<span className=\"type\">{ent.type}</span>))\n\t\t\tif(prop=='code')\n\t\t\t\thtmlArr.push(<span> - {ent.value}</span>)\n\t\t\tent.html=htmlArr\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<CompletionInput \n\t\t\t\tid={settings.inputId} \n\t\t\t\tdebounce={settings.debounce} \n\t\t\t\tonInput={this.getCompletions.bind(this)} \n\t\t\t\tonSubmit={this.props.onSubmit}\n\t\t\t/>\n\t\t)\n\t}\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}