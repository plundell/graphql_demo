{"ast":null,"code":"import { GraphQLClient } from 'graphql-request';\nimport queries from './queries';\nexport const uri = \"https://countries.trevorblades.com\";\nexport const graphql = Object.assign(new GraphQLClient(uri, {\n  headers: {}\n}), queries);\n\n// The ./types.ts file is generated by the module graphql-codegen (which has to be run manually) \n// from all .graphql files in this project. We export it so others don't have to import 2 things\nexport * from './types';\nexport let EntityType;\n(function (EntityType) {\n  EntityType[\"Country\"] = \"Country\";\n  EntityType[\"Continent\"] = \"Continent\";\n  EntityType[\"Language\"] = \"Language\";\n})(EntityType || (EntityType = {}));\nexport let QueryName;\n(function (QueryName) {\n  QueryName[\"countries\"] = \"countries\";\n  QueryName[\"continents\"] = \"continents\";\n  QueryName[\"languages\"] = \"languages\";\n})(QueryName || (QueryName = {}));\nconst EntityMap = {\n  'coun': {\n    type: 'Country',\n    query: 'countries'\n  },\n  'cont': {\n    type: 'Continent',\n    query: 'continents'\n  },\n  'lang': {\n    type: 'Language',\n    query: 'languages'\n  }\n};\nfunction toMap(x) {\n  const key = x.toLowerCase().slice(0, 4);\n  if (key in EntityMap) return EntityMap[key];else throw new Error(`Not a valid Entity: {x}`);\n}\nexport function toEntityType(x) {\n  return toMap(x).type;\n}\nexport function toQueryName(x) {\n  return toMap(x).query;\n}","map":{"version":3,"names":["GraphQLClient","queries","uri","graphql","Object","assign","headers","EntityType","QueryName","EntityMap","type","query","toMap","x","key","toLowerCase","slice","Error","toEntityType","toQueryName"],"sources":["/home/buck/Documents/software/formulate_graphql/src/services/countries-api/countries-api.service.ts"],"sourcesContent":["import { GraphQLClient } from 'graphql-request'\n\nimport queries from './queries'\n\nexport const uri = \"https://countries.trevorblades.com\";\n\ntype Queries={\n\t[key in keyof typeof queries]:typeof queries[key];\n};\n\nexport const graphql:GraphQLClient & Queries = Object.assign(\n\tnew GraphQLClient(uri, { headers: {} })\n\t,queries\n);\n\n// The ./types.ts file is generated by the module graphql-codegen (which has to be run manually) \n// from all .graphql files in this project. We export it so others don't have to import 2 things\nexport * from './types'\n\n\nexport enum EntityType {\n\tCountry='Country'\n\t,Continent='Continent'\n\t,Language='Language'\n}\nexport enum QueryName{\n\tcountries='countries'\n\t,continents='continents'\n\t,languages='languages'\n}\ninterface E{type:EntityType,query:QueryName}\ninterface M{[key:string]:E}\nconst EntityMap={\n\t'coun':{type:'Country',query:'countries'},\n\t'cont':{type:'Continent',query:'continents'},\n\t'lang':{type:'Language',query:'languages'}\n} as unknown as M\nfunction toMap(x:string){\n\tconst key=x.toLowerCase().slice(0,4);\n\tif(key in EntityMap)\n\t\treturn EntityMap[key];\n\telse\n\t\tthrow new Error(`Not a valid Entity: {x}`);\n}\nexport function toEntityType(x:string){\n\treturn toMap(x).type;\n}\nexport function toQueryName(x:string){\n\treturn toMap(x).query;\n}\n\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,iBAAiB;AAE/C,OAAOC,OAAO,MAAM,WAAW;AAE/B,OAAO,MAAMC,GAAG,GAAG,oCAAoC;AAMvD,OAAO,MAAMC,OAA+B,GAAGC,MAAM,CAACC,MAAM,CAC3D,IAAIL,aAAa,CAACE,GAAG,EAAE;EAAEI,OAAO,EAAE,CAAC;AAAE,CAAC,CAAC,EACtCL,OAAO,CACR;;AAED;AACA;AACA,cAAc,SAAS;AAGvB,WAAYM,UAAU;AAIrB,WAJWA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;AAAA,GAAVA,UAAU,KAAVA,UAAU;AAKtB,WAAYC,SAAS;AAIpB,WAJWA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;AAAA,GAATA,SAAS,KAATA,SAAS;AAOrB,MAAMC,SAAS,GAAC;EACf,MAAM,EAAC;IAACC,IAAI,EAAC,SAAS;IAACC,KAAK,EAAC;EAAW,CAAC;EACzC,MAAM,EAAC;IAACD,IAAI,EAAC,WAAW;IAACC,KAAK,EAAC;EAAY,CAAC;EAC5C,MAAM,EAAC;IAACD,IAAI,EAAC,UAAU;IAACC,KAAK,EAAC;EAAW;AAC1C,CAAiB;AACjB,SAASC,KAAK,CAACC,CAAQ,EAAC;EACvB,MAAMC,GAAG,GAACD,CAAC,CAACE,WAAW,EAAE,CAACC,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC;EACpC,IAAGF,GAAG,IAAIL,SAAS,EAClB,OAAOA,SAAS,CAACK,GAAG,CAAC,CAAC,KAEtB,MAAM,IAAIG,KAAK,CAAE,yBAAwB,CAAC;AAC5C;AACA,OAAO,SAASC,YAAY,CAACL,CAAQ,EAAC;EACrC,OAAOD,KAAK,CAACC,CAAC,CAAC,CAACH,IAAI;AACrB;AACA,OAAO,SAASS,WAAW,CAACN,CAAQ,EAAC;EACpC,OAAOD,KAAK,CAACC,CAAC,CAAC,CAACF,KAAK;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}