(async function generateTypescriptQueriesFromGraphql(){
	// try{
		const path=require('path');
		const fs=require("fs").promises;
		
		const typesFile=process.argv[2];
		try{
			await fs.access(typesFile,fs.constants.R_OK);
		}catch(e){
			console.error(e);
			console.error("Expected the only arg to this script to be the path of the file "+
				"genereated by graphql-codegen containing all the typescript types for the "+
				"graphql queries");
			return;
		}
		const queriesFile=path.dirname(typesFile)+path.sep+'queries.ts';
		const importFile='./'+path.basename(typesFile,'.ts');

		const typesFileContents=await fs.readFile(typesFile,{encoding:'utf8'});
		const output=[
			`/* This script has been generated by ${__filename}.\n`,
			` * All the exported functions should be imported into another file and set on an\n`,
			` * instance of graphql-request.GraphQLClient\n`,
			` */\n`,
			`import { GraphQLClient } from 'graphql-request'\n`
		]
		const methodNames=[];
		for(let [,queryName] of typesFileContents.matchAll(/^export const (\w+)Document = /gm) ){
			let methodName='get'+queryName;
			methodNames.push(methodName)
			output.push(`
import {${queryName}Query, ${queryName}QueryVariables, ${queryName}Document} from '${importFile}'
async function ${methodName}(this:GraphQLClient, args:${queryName}QueryVariables){
	return this.request<${queryName}Query,${queryName}QueryVariables>(${queryName}Document,args)
}`
			);
		}

		output.push(`\n\nexport default {${methodNames.join(',')}};`);
		// console.log(queriesFile);
		fs.writeFile(queriesFile,output);
	// }catch(e){
		// console.error(e);
	// }
})()